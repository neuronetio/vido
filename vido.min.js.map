{"version":3,"file":"vido.min.js","sources":["node_modules/lit-html/lib/directive.js","node_modules/lit-html/lib/dom.js","node_modules/lit-html/lib/part.js","node_modules/lit-html/lib/template.js","node_modules/lit-html/lib/template-instance.js","node_modules/lit-html/lib/template-result.js","node_modules/lit-html/lib/parts.js","node_modules/lit-html/lib/default-template-processor.js","node_modules/lit-html/lib/template-factory.js","node_modules/lit-html/lib/render.js","node_modules/lit-html/lit-html.js","node_modules/lit-html/directives/async-append.js","node_modules/lit-html/directives/async-replace.js","node_modules/lit-html/directives/cache.js","node_modules/lit-html/directives/class-map.js","node_modules/lit-html/directives/guard.js","node_modules/lit-html/directives/if-defined.js","node_modules/lit-html/directives/repeat.js","node_modules/lit-html/directives/unsafe-html.js","node_modules/lit-html/directives/until.js","Detach.ts","StyleMap.ts","Action.ts","PointerAction.ts","helpers.ts","vido.ts","ActionsCollector.ts","PublicComponentMethods.ts","InternalComponentMethods.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    // tslint:disable-next-line:no-any\n    d.isDirective = true;\n    return d;\n});\nexport class Directive {\n    constructor() {\n        this.isDirective = true;\n        this.isClass = true;\n    }\n    body(_part) {\n        // body of the directive\n    }\n    runPart(part) {\n        return this.body(part);\n    }\n}\nexport const isDirective = (o) => {\n    return o !== undefined && o !== null &&\n        // tslint:disable-next-line:no-any\n        typeof o.isDirective === 'boolean';\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({\n                            type: 'attribute',\n                            index,\n                            name,\n                            strings: statics,\n                            sanitizer: undefined\n                        });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n/**\n * Used to clone existing node instead of each time creating new one which is\n * slower\n */\nconst markerNode = document.createComment('');\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => markerNode.cloneNode();\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const textPart = this.processor.handleTextExpression(this.options, part);\n                textPart.insertAfterNode(node.previousSibling);\n                this.__parts.push(textPart);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options, part));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nlet policy;\n/**\n * Turns the value to trusted HTML. If the application uses Trusted Types the\n * value is transformed into TrustedHTML, which can be assigned to execution\n * sink. If the application doesn't use Trusted Types, the return value is the\n * same as the argument.\n */\nfunction convertConstantTemplateStringToTrustedHTML(value) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const w = window;\n    // TrustedTypes have been renamed to trustedTypes\n    // (https://github.com/WICG/trusted-types/issues/177)\n    const trustedTypes = (w.trustedTypes || w.TrustedTypes);\n    if (trustedTypes && !policy) {\n        policy = trustedTypes.createPolicy('lit-html', { createHTML: (s) => s });\n    }\n    return policy ? policy.createHTML(value) : value;\n}\nconst commentMarker = ` ${marker} `;\n/**\n * Used to clone existing node instead of each time creating new one which is\n * slower\n */\nconst emptyTemplateNode = document.createElement('template');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = emptyTemplateNode.cloneNode();\n        // this is secure because `this.strings` is a TemplateStringsArray.\n        // TODO: validate this when\n        // https://github.com/tc39/proposal-array-is-template-object is implemented.\n        template.innerHTML =\n            convertConstantTemplateStringToTrustedHTML(this.getHTML());\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line: no-any\n        !!(value && value[Symbol.iterator]);\n};\nconst identityFunction = (value) => value;\nconst noopSanitizer = (_node, _name, _type) => identityFunction;\n/**\n * A global callback used to get a sanitizer for a given field.\n */\nexport let sanitizerFactory = noopSanitizer;\n/** Sets the global sanitizer factory. */\nexport const setSanitizerFactory = (newSanitizer) => {\n    if (sanitizerFactory !== noopSanitizer) {\n        throw new Error(`Attempted to overwrite existing lit-html security policy.` +\n            ` setSanitizeDOMValueFactory should be called at most once.`);\n    }\n    sanitizerFactory = newSanitizer;\n};\n/**\n * Only used in internal tests, not a part of the public API.\n * The name and implementation may change at any time.\n */\nexport const __testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n    sanitizerFactory = noopSanitizer;\n};\n/**\n * Used to clone text node instead of each time creating new one which is slower\n */\nconst emptyTextNode = document.createTextNode('');\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings, \n    // Next breaking change, consider making this param required.\n    templatePart, kind = 'attribute') {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        let sanitizer = templatePart && templatePart.sanitizer;\n        if (sanitizer === undefined) {\n            sanitizer = sanitizerFactory(element, name, kind);\n            if (templatePart !== undefined) {\n                templatePart.sanitizer = sanitizer;\n            }\n        }\n        this.sanitizer = sanitizer;\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const parts = this.parts;\n        const l = strings.length - 1;\n        // If we're assigning an attribute via syntax like:\n        //    attr=\"${foo}\"  or  attr=${foo}\n        // but not\n        //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n        // then we don't want to coerce the attribute value into one long\n        // string. Instead we want to just return the value itself directly,\n        // so that sanitizeDOMValue can get the actual value rather than\n        // String(value)\n        // The exception is if v is an array, in which case we do want to smash\n        // it together into a string without calling String() on the array.\n        //\n        // This also allows trusted values (when using TrustedTypes) being\n        // assigned to DOM sinks without being stringified in the process.\n        if (l === 1 && strings[0] === '' && strings[1] === '' &&\n            parts[0] !== undefined) {\n            const v = parts[0].value;\n            if (!isIterable(v)) {\n                return v;\n            }\n        }\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            let value = this._getValue();\n            value = this.sanitizer(value);\n            if (typeof value === 'symbol') {\n                // Native Symbols throw if they're coerced to string.\n                value = String(value);\n            }\n            this.element.setAttribute(this.name, value);\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            // tslint:disable-next-line: no-any\n            if (directive.isClass) {\n                // tslint:disable-next-line: no-any\n                directive.runPart(this);\n            }\n            else {\n                directive(this);\n            }\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options, templatePart) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        /**\n         * The sanitizer to use when writing text contents into this NodePart.\n         *\n         * We have to initialize this here rather than at the template literal level\n         * because the security of text content depends on the context into which\n         * it's written. e.g. the same text has different security requirements\n         * when a child of a <script> vs a <style> vs a <div>.\n         */\n        this.textSanitizer = undefined;\n        this.options = options;\n        this.templatePart = templatePart;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            // tslint:disable-next-line: no-any\n            if (directive.isClass) {\n                // tslint:disable-next-line: no-any\n                directive.runPart(this);\n            }\n            else {\n                directive(this);\n            }\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            if (this.textSanitizer === undefined) {\n                this.textSanitizer = sanitizerFactory(node, 'data', 'property');\n            }\n            const renderedValue = this.textSanitizer(value);\n            node.data = typeof renderedValue === 'string' ?\n                renderedValue :\n                String(renderedValue);\n        }\n        else {\n            // When setting text content, for security purposes it matters a lot what\n            // the parent is. For example, <style> and <script> need to be handled\n            // with care, while <span> does not. So first we need to put a text node\n            // into the document, then we can sanitize its contentx.\n            const textNode = emptyTextNode.cloneNode();\n            this.__commitNode(textNode);\n            if (this.textSanitizer === undefined) {\n                this.textSanitizer = sanitizerFactory(textNode, 'data', 'property');\n            }\n            const renderedValue = this.textSanitizer(value);\n            textNode.data = typeof renderedValue === 'string' ? renderedValue :\n                String(renderedValue);\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // `value` is a template result that was constructed without knowledge of\n            // the parent we're about to write it into. sanitizeDOMValue hasn't been\n            // made aware of this relationship, and for scripts and style specifically\n            // this is known to be unsafe. So in the case where the user is in\n            // \"secure mode\" (i.e. when there's a sanitizeDOMValue set), we just want\n            // to forbid this because it's not a use case we want to support.\n            // We only apply this policy when sanitizerFactory has been set to\n            // prevent this from being a breaking change to the library.\n            const parent = this.endNode.parentNode;\n            if (sanitizerFactory !== noopSanitizer && parent.nodeName === 'STYLE' ||\n                parent.nodeName === 'SCRIPT') {\n                this.__commitText('/* lit-html will not write ' +\n                    'TemplateResults to scripts and styles */');\n                return;\n            }\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options, this.templatePart);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            // tslint:disable-next-line: no-any\n            if (directive.isClass) {\n                // tslint:disable-next-line: no-any\n                directive.runPart(this);\n            }\n            else {\n                directive(this);\n            }\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings, \n    // Next breaking change, consider making this param required.\n    templatePart) {\n        super(element, name, strings, templatePart, 'property');\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            let value = this._getValue();\n            value = this.sanitizer(value);\n            // tslint:disable-next-line: no-any\n            this.element[this.name] = value;\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line: no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line: no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) { // eslint-disable-line no-empty\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            // tslint:disable-next-line: no-any\n            if (directive.isClass) {\n                // tslint:disable-next-line: no-any\n                directive.runPart(this);\n            }\n            else {\n                directive(this);\n            }\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options, templatePart) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings, templatePart);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings, templatePart);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options, nodeTemplatePart) {\n        return new NodePart(options, nodeTemplatePart);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options), undefined));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, Directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart, sanitizerFactory, setSanitizerFactory } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nimport { createMarker, directive, NodePart } from '../lit-html.js';\n/**\n * A directive that renders the items of an async iterable[1], appending new\n * values after previous values, similar to the built-in support for iterables.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is appended to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://github.com/tc39/proposal-async-iteration\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncAppend = directive((value, mapper) => async (part) => {\n    var e_1, _a;\n    if (!(part instanceof NodePart)) {\n        throw new Error('asyncAppend can only be used in text bindings');\n    }\n    // If we've already set up this particular iterable, we don't need\n    // to do anything.\n    if (value === part.value) {\n        return;\n    }\n    part.value = value;\n    // We keep track of item Parts across iterations, so that we can\n    // share marker nodes between consecutive Parts.\n    let itemPart;\n    let i = 0;\n    try {\n        for (var value_1 = __asyncValues(value), value_1_1; value_1_1 = await value_1.next(), !value_1_1.done;) {\n            let v = value_1_1.value;\n            // Check to make sure that value is the still the current value of\n            // the part, and if not bail because a new value owns this part\n            if (part.value !== value) {\n                break;\n            }\n            // When we get the first value, clear the part. This lets the\n            // previous value display until we can replace it.\n            if (i === 0) {\n                part.clear();\n            }\n            // As a convenience, because functional-programming-style\n            // transforms of iterables and async iterables requires a library,\n            // we accept a mapper function. This is especially convenient for\n            // rendering a template for each item.\n            if (mapper !== undefined) {\n                // This is safe because T must otherwise be treated as unknown by\n                // the rest of the system.\n                v = mapper(v, i);\n            }\n            // Like with sync iterables, each item induces a Part, so we need\n            // to keep track of start and end nodes for the Part.\n            // Note: Because these Parts are not updatable like with a sync\n            // iterable (if we render a new value, we always clear), it may\n            // be possible to optimize away the Parts and just re-use the\n            // Part.setValue() logic.\n            let itemStartNode = part.startNode;\n            // Check to see if we have a previous item and Part\n            if (itemPart !== undefined) {\n                // Create a new node to separate the previous and next Parts\n                itemStartNode = createMarker();\n                // itemPart is currently the Part for the previous item. Set\n                // it's endNode to the node we'll use for the next Part's\n                // startNode.\n                itemPart.endNode = itemStartNode;\n                part.endNode.parentNode.insertBefore(itemStartNode, part.endNode);\n            }\n            itemPart = new NodePart(part.options, part.templatePart);\n            itemPart.insertAfterNode(itemStartNode);\n            itemPart.setValue(v);\n            itemPart.commit();\n            i++;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (value_1_1 && !value_1_1.done && (_a = value_1.return)) await _a.call(value_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n});\n//# sourceMappingURL=async-append.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nimport { directive, NodePart } from '../lit-html.js';\n/**\n * A directive that renders the items of an async iterable[1], replacing\n * previous values with new values, so that only one value is ever rendered\n * at a time.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is rendered to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://github.com/tc39/proposal-async-iteration\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncReplace = directive((value, mapper) => async (part) => {\n    var e_1, _a;\n    if (!(part instanceof NodePart)) {\n        throw new Error('asyncReplace can only be used in text bindings');\n    }\n    // If we've already set up this particular iterable, we don't need\n    // to do anything.\n    if (value === part.value) {\n        return;\n    }\n    // We nest a new part to keep track of previous item values separately\n    // of the iterable as a value itself.\n    const itemPart = new NodePart(part.options, part.templatePart);\n    part.value = value;\n    let i = 0;\n    try {\n        for (var value_1 = __asyncValues(value), value_1_1; value_1_1 = await value_1.next(), !value_1_1.done;) {\n            let v = value_1_1.value;\n            // Check to make sure that value is the still the current value of\n            // the part, and if not bail because a new value owns this part\n            if (part.value !== value) {\n                break;\n            }\n            // When we get the first value, clear the part. This let's the\n            // previous value display until we can replace it.\n            if (i === 0) {\n                part.clear();\n                itemPart.appendIntoPart(part);\n            }\n            // As a convenience, because functional-programming-style\n            // transforms of iterables and async iterables requires a library,\n            // we accept a mapper function. This is especially convenient for\n            // rendering a template for each item.\n            if (mapper !== undefined) {\n                // This is safe because T must otherwise be treated as unknown by\n                // the rest of the system.\n                v = mapper(v, i);\n            }\n            itemPart.setValue(v);\n            itemPart.commit();\n            i++;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (value_1_1 && !value_1_1.done && (_a = value_1.return)) await _a.call(value_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n});\n//# sourceMappingURL=async-replace.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateInstance } from '../lib/template-instance.js';\nimport { directive, NodePart, reparentNodes, TemplateResult } from '../lit-html.js';\nconst templateCaches = new WeakMap();\n/**\n * Enables fast switching between multiple templates by caching the DOM nodes\n * and TemplateInstances produced by the templates.\n *\n * Example:\n *\n * ```\n * let checked = false;\n *\n * html`\n *   ${cache(checked ? html`input is checked` : html`input is not checked`)}\n * `\n * ```\n */\nexport const cache = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('cache can only be used in text bindings');\n    }\n    let templateCache = templateCaches.get(part);\n    if (templateCache === undefined) {\n        templateCache = new WeakMap();\n        templateCaches.set(part, templateCache);\n    }\n    const previousValue = part.value;\n    // First, can we update the current TemplateInstance, or do we need to move\n    // the current nodes into the cache?\n    if (previousValue instanceof TemplateInstance) {\n        if (value instanceof TemplateResult &&\n            previousValue.template === part.options.templateFactory(value)) {\n            // Same Template, just trigger an update of the TemplateInstance\n            part.setValue(value);\n            return;\n        }\n        else {\n            // Not the same Template, move the nodes from the DOM into the cache.\n            let cachedTemplate = templateCache.get(previousValue.template);\n            if (cachedTemplate === undefined) {\n                cachedTemplate = {\n                    instance: previousValue,\n                    nodes: document.createDocumentFragment(),\n                };\n                templateCache.set(previousValue.template, cachedTemplate);\n            }\n            reparentNodes(cachedTemplate.nodes, part.startNode.nextSibling, part.endNode);\n        }\n    }\n    // Next, can we reuse nodes from the cache?\n    if (value instanceof TemplateResult) {\n        const template = part.options.templateFactory(value);\n        const cachedTemplate = templateCache.get(template);\n        if (cachedTemplate !== undefined) {\n            // Move nodes out of cache\n            part.setValue(cachedTemplate.nodes);\n            part.commit();\n            // Set the Part value to the TemplateInstance so it'll update it.\n            part.value = cachedTemplate.instance;\n        }\n    }\n    part.setValue(value);\n});\n//# sourceMappingURL=cache.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst previousClassesCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    let previousClasses = previousClassesCache.get(part);\n    if (previousClasses === undefined) {\n        // Write static classes once\n        element.className = committer.strings.join(' ');\n        previousClassesCache.set(part, previousClasses = new Set());\n    }\n    const { classList } = element;\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n    previousClasses.forEach((name) => {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n            previousClasses.delete(name);\n        }\n    });\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        // We explicitly want a loose truthy check of `value` because it seems more\n        // convenient that '' and 0 are skipped.\n        if (value != previousClasses.has(name)) {\n            if (value) {\n                classList.add(name);\n                previousClasses.add(name);\n            }\n            else {\n                classList.remove(name);\n                previousClasses.delete(name);\n            }\n        }\n    }\n});\n//# sourceMappingURL=class-map.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { directive } from '../lit-html.js';\nconst previousValues = new WeakMap();\n/**\n * Prevents re-render of a template function until a single value or an array of\n * values changes.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([user.id, company.id], () => html`...`)}\n *   </div>\n * ```\n *\n * In this case, the template only renders if either `user.id` or `company.id`\n * changes.\n *\n * guard() is useful with immutable data patterns, by preventing expensive work\n * until data updates.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n *   </div>\n * ```\n *\n * In this case, items are mapped over only when the array reference changes.\n *\n * @param value the value to check before re-rendering\n * @param f the template function\n */\nexport const guard = directive((value, f) => (part) => {\n    const previousValue = previousValues.get(part);\n    if (Array.isArray(value)) {\n        // Dirty-check arrays by item\n        if (Array.isArray(previousValue) &&\n            previousValue.length === value.length &&\n            value.every((v, i) => v === previousValue[i])) {\n            return;\n        }\n    }\n    else if (previousValue === value &&\n        (value !== undefined || previousValues.has(part))) {\n        // Dirty-check non-arrays by identity\n        return;\n    }\n    part.setValue(f());\n    // Copy the value if it's an array so that if it's mutated we don't forget\n    // what the previous values were.\n    previousValues.set(part, Array.isArray(value) ? Array.from(value) : value);\n});\n//# sourceMappingURL=guard.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive } from '../lit-html.js';\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = directive((value) => (part) => {\n    if (value === undefined && part instanceof AttributePart) {\n        if (value !== part.value) {\n            const name = part.committer.name;\n            part.committer.element.removeAttribute(name);\n        }\n    }\n    else {\n        part.setValue(value);\n    }\n});\n//# sourceMappingURL=if-defined.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { createMarker, directive, NodePart, removeNodes, reparentNodes } from '../lit-html.js';\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart = (containerPart, beforePart) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = beforePart == null ? containerPart.endNode : beforePart.startNode;\n    const startNode = container.insertBefore(createMarker(), beforeNode);\n    container.insertBefore(createMarker(), beforeNode);\n    const newPart = new NodePart(containerPart.options, undefined);\n    newPart.insertAfterNode(startNode);\n    return newPart;\n};\nconst updatePart = (part, value) => {\n    part.setValue(value);\n    part.commit();\n    return part;\n};\nconst insertPartBefore = (containerPart, part, ref) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = ref ? ref.startNode : containerPart.endNode;\n    const endNode = part.endNode.nextSibling;\n    if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n    }\n};\nconst removePart = (part) => {\n    removeNodes(part.startNode.parentNode, part.startNode, part.endNode.nextSibling);\n};\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list, start, end) => {\n    const map = new Map();\n    for (let i = start; i <= end; i++) {\n        map.set(list[i], i);\n    }\n    return map;\n};\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap();\nconst keyListCache = new WeakMap();\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive((items, keyFnOrTemplate, template) => {\n    let keyFn;\n    if (template === undefined) {\n        template = keyFnOrTemplate;\n    }\n    else if (keyFnOrTemplate !== undefined) {\n        keyFn = keyFnOrTemplate;\n    }\n    return (containerPart) => {\n        if (!(containerPart instanceof NodePart)) {\n            throw new Error('repeat can only be used in text bindings');\n        }\n        // Old part & key lists are retrieved from the last update\n        // (associated with the part for this instance of the directive)\n        const oldParts = partListCache.get(containerPart) || [];\n        const oldKeys = keyListCache.get(containerPart) || [];\n        // New part list will be built up as we go (either reused from\n        // old parts or created for new keys in this update). This is\n        // saved in the above cache at the end of the update.\n        const newParts = [];\n        // New value list is eagerly generated from items along with a\n        // parallel array indicating its key.\n        const newValues = [];\n        const newKeys = [];\n        let index = 0;\n        for (const item of items) {\n            newKeys[index] = keyFn ? keyFn(item, index) : index;\n            newValues[index] = template(item, index);\n            index++;\n        }\n        // Maps from key to index for current and previous update; these\n        // are generated lazily only when needed as a performance\n        // optimization, since they are only required for multiple\n        // non-contiguous changes in the list, which are less common.\n        let newKeyToIndexMap;\n        let oldKeyToIndexMap;\n        // Head and tail pointers to old parts and new values\n        let oldHead = 0;\n        let oldTail = oldParts.length - 1;\n        let newHead = 0;\n        let newTail = newValues.length - 1;\n        // Overview of O(n) reconciliation algorithm (general approach\n        // based on ideas found in ivi, vue, snabbdom, etc.):\n        //\n        // * We start with the list of old parts and new values (and\n        //   arrays of their respective keys), head/tail pointers into\n        //   each, and we build up the new list of parts by updating\n        //   (and when needed, moving) old parts or creating new ones.\n        //   The initial scenario might look like this (for brevity of\n        //   the diagrams, the numbers in the array reflect keys\n        //   associated with the old parts or new values, although keys\n        //   and parts/values are actually stored in parallel arrays\n        //   indexed using the same head/tail pointers):\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n        //                                      item order\n        //      newHead ^                 ^ newTail\n        //\n        // * Iterate old & new lists from both sides, updating,\n        //   swapping, or removing parts at the head/tail locations\n        //   until neither head nor tail can move.\n        //\n        // * Example below: keys at head pointers match, so update old\n        //   part 0 in-place (no need to move it) and record part 0 in\n        //   the `newParts` list. The last thing we do is advance the\n        //   `oldHead` and `newHead` pointers (will be reflected in the\n        //   next diagram).\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //      newHead ^                 ^ newTail\n        //\n        // * Example below: head pointers don't match, but tail\n        //   pointers do, so update part 6 in place (no need to move\n        //   it), and record part 6 in the `newParts` list. Last,\n        //   advance the `oldTail` and `oldHead` pointers.\n        //\n        //         oldHead v              v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n        //                                      & newTail\n        //         newHead ^              ^ newTail\n        //\n        // * If neither head nor tail match; next check if one of the\n        //   old head/tail items was removed. We first need to generate\n        //   the reverse map of new keys to index (`newKeyToIndexMap`),\n        //   which is done once lazily as a performance optimization,\n        //   since we only hit this case if multiple non-contiguous\n        //   changes were made. Note that for contiguous removal\n        //   anywhere in the list, the head and tails would advance\n        //   from either end and pass each other before we get to this\n        //   case and removals would be handled in the final while loop\n        //   without needing to generate the map.\n        //\n        // * Example below: The key at `oldTail` was removed (no longer\n        //   in the `newKeyToIndexMap`), so remove that part from the\n        //   DOM and advance just the `oldTail` pointer.\n        //\n        //         oldHead v           v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n        //         newHead ^           ^ newTail\n        //\n        // * Once head and tail cannot move, any mismatches are due to\n        //   either new or moved items; if a new key is in the previous\n        //   \"old key to old index\" map, move the old part to the new\n        //   location, otherwise create and insert a new part. Note\n        //   that when moving an old part we null its position in the\n        //   oldParts array if it lies between the head and tail so we\n        //   know to skip it when the pointers get there.\n        //\n        // * Example below: neither head nor tail match, and neither\n        //   were removed; so find the `newHead` key in the\n        //   `oldKeyToIndexMap`, and move that old part's DOM into the\n        //   next head position (before `oldParts[oldHead]`). Last,\n        //   null the part in the `oldPart` array since it was\n        //   somewhere in the remaining oldParts still to be scanned\n        //   (between the head and tail pointers) so that we know to\n        //   skip that old part on future iterations.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n        //                                      newHead\n        //         newHead ^           ^ newTail\n        //\n        // * Note that for moves/insertions like the one above, a part\n        //   inserted at the head pointer is inserted before the\n        //   current `oldParts[oldHead]`, and a part inserted at the\n        //   tail pointer is inserted before `newParts[newTail+1]`. The\n        //   seeming asymmetry lies in the fact that new parts are\n        //   moved into place outside in, so to the right of the head\n        //   pointer are old parts, and to the right of the tail\n        //   pointer are new parts.\n        //\n        // * We always restart back from the top of the algorithm,\n        //   allowing matching and simple updates in place to\n        //   continue...\n        //\n        // * Example below: the head pointers once again match, so\n        //   simply update part 1 and record it in the `newParts`\n        //   array.  Last, advance both head pointers.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //            newHead ^        ^ newTail\n        //\n        // * As mentioned above, items that were moved as a result of\n        //   being stuck (the final else clause in the code below) are\n        //   marked with null, so we always advance old pointers over\n        //   these so we're comparing the next actual old value on\n        //   either end.\n        //\n        // * Example below: `oldHead` is null (already placed in\n        //   newParts), so advance `oldHead`.\n        //\n        //            oldHead v     v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n        //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //               newHead ^     ^ newTail\n        //\n        // * Note it's not critical to mark old parts as null when they\n        //   are moved from head to tail or tail to head, since they\n        //   will be outside the pointer range and never visited again.\n        //\n        // * Example below: Here the old tail key matches the new head\n        //   key, so the part at the `oldTail` position and move its\n        //   DOM to the new head position (before `oldParts[oldHead]`).\n        //   Last, advance `oldTail` and `newHead` pointers.\n        //\n        //               oldHead v  v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n        //                                     advance oldTail & newHead\n        //               newHead ^     ^ newTail\n        //\n        // * Example below: Old and new head keys match, so update the\n        //   old head part in place, and advance the `oldHead` and\n        //   `newHead` pointers.\n        //\n        //               oldHead v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n        //                                      newHead\n        //                  newHead ^  ^ newTail\n        //\n        // * Once the new or old pointers move past each other then all\n        //   we have left is additions (if old list exhausted) or\n        //   removals (if new list exhausted). Those are handled in the\n        //   final while loops at the end.\n        //\n        // * Example below: `oldHead` exceeded `oldTail`, so we're done\n        //   with the main loop.  Create the remaining part and insert\n        //   it at the new head position, and the update is complete.\n        //\n        //                   (oldHead > oldTail)\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //                     newHead ^ newTail\n        //\n        // * Note that the order of the if/else clauses is not\n        //   important to the algorithm, as long as the null checks\n        //   come first (to ensure we're always working on valid old\n        //   parts) and that the final else clause comes last (since\n        //   that's where the expensive moves occur). The order of\n        //   remaining clauses is is just a simple guess at which cases\n        //   will be most common.\n        //\n        // * TODO(kschaaf) Note, we could calculate the longest\n        //   increasing subsequence (LIS) of old items in new position,\n        //   and only move those not in the LIS set. However that costs\n        //   O(nlogn) time and adds a bit more code, and only helps\n        //   make rare types of mutations require fewer moves. The\n        //   above handles removes, adds, reversal, swaps, and single\n        //   moves of contiguous items in linear time, in the minimum\n        //   number of moves. As the number of multiple moves where LIS\n        //   might help approaches a random shuffle, the LIS\n        //   optimization becomes less helpful, so it seems not worth\n        //   the code at this point. Could reconsider if a compelling\n        //   case arises.\n        while (oldHead <= oldTail && newHead <= newTail) {\n            if (oldParts[oldHead] === null) {\n                // `null` means old part at head has already been used\n                // below; skip\n                oldHead++;\n            }\n            else if (oldParts[oldTail] === null) {\n                // `null` means old part at tail has already been used\n                // below; skip\n                oldTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newHead]) {\n                // Old head matches new head; update in place\n                newParts[newHead] =\n                    updatePart(oldParts[oldHead], newValues[newHead]);\n                oldHead++;\n                newHead++;\n            }\n            else if (oldKeys[oldTail] === newKeys[newTail]) {\n                // Old tail matches new tail; update in place\n                newParts[newTail] =\n                    updatePart(oldParts[oldTail], newValues[newTail]);\n                oldTail--;\n                newTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newTail]) {\n                // Old head matches new tail; update and move to new tail\n                newParts[newTail] =\n                    updatePart(oldParts[oldHead], newValues[newTail]);\n                insertPartBefore(containerPart, oldParts[oldHead], newParts[newTail + 1]);\n                oldHead++;\n                newTail--;\n            }\n            else if (oldKeys[oldTail] === newKeys[newHead]) {\n                // Old tail matches new head; update and move to new head\n                newParts[newHead] =\n                    updatePart(oldParts[oldTail], newValues[newHead]);\n                insertPartBefore(containerPart, oldParts[oldTail], oldParts[oldHead]);\n                oldTail--;\n                newHead++;\n            }\n            else {\n                if (newKeyToIndexMap === undefined) {\n                    // Lazily generate key-to-index maps, used for removals &\n                    // moves below\n                    newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n                    oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n                }\n                if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n                    // Old head is no longer in new list; remove\n                    removePart(oldParts[oldHead]);\n                    oldHead++;\n                }\n                else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n                    // Old tail is no longer in new list; remove\n                    removePart(oldParts[oldTail]);\n                    oldTail--;\n                }\n                else {\n                    // Any mismatches at this point are due to additions or\n                    // moves; see if we have an old part we can reuse and move\n                    // into place\n                    const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n                    const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n                    if (oldPart === null) {\n                        // No old part for this value; create a new one and\n                        // insert it\n                        const newPart = createAndInsertPart(containerPart, oldParts[oldHead]);\n                        updatePart(newPart, newValues[newHead]);\n                        newParts[newHead] = newPart;\n                    }\n                    else {\n                        // Reuse old part\n                        newParts[newHead] =\n                            updatePart(oldPart, newValues[newHead]);\n                        insertPartBefore(containerPart, oldPart, oldParts[oldHead]);\n                        // This marks the old part as having been used, so that\n                        // it will be skipped in the first two checks above\n                        oldParts[oldIndex] = null;\n                    }\n                    newHead++;\n                }\n            }\n        }\n        // Add parts for any remaining new values\n        while (newHead <= newTail) {\n            // For all remaining additions, we insert before last new\n            // tail, since old pointers are no longer valid\n            const newPart = createAndInsertPart(containerPart, newParts[newTail + 1]);\n            updatePart(newPart, newValues[newHead]);\n            newParts[newHead++] = newPart;\n        }\n        // Remove any remaining unused old parts\n        while (oldHead <= oldTail) {\n            const oldPart = oldParts[oldHead++];\n            if (oldPart !== null) {\n                removePart(oldPart);\n            }\n        }\n        // Save order of new parts for next round\n        partListCache.set(containerPart, newParts);\n        keyListCache.set(containerPart, newKeys);\n    };\n});\n//# sourceMappingURL=repeat.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive, NodePart } from '../lit-html.js';\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap();\n/**\n * Used to clone existing node instead of each time creating new one which is\n * slower\n */\nconst emptyTemplateNode = document.createElement('template');\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('unsafeHTML can only be used in text bindings');\n    }\n    const previousValue = previousValues.get(part);\n    if (previousValue !== undefined && isPrimitive(value) &&\n        value === previousValue.value && part.value === previousValue.fragment) {\n        return;\n    }\n    const template = emptyTemplateNode.cloneNode();\n    template.innerHTML = value; // innerHTML casts to string internally\n    const fragment = document.importNode(template.content, true);\n    part.setValue(fragment);\n    previousValues.set(part, { value, fragment });\n});\n//# sourceMappingURL=unsafe-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive } from '../lit-html.js';\nconst _state = new WeakMap();\n// Effectively infinity, but a SMI.\nconst _infinity = 0x7fffffff;\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n *     const content = fetch('./content.txt').then(r => r.text());\n *     html`${until(content, html`<span>Loading...</span>`)}`\n */\nexport const until = directive((...args) => (part) => {\n    let state = _state.get(part);\n    if (state === undefined) {\n        state = {\n            lastRenderedIndex: _infinity,\n            values: [],\n        };\n        _state.set(part, state);\n    }\n    const previousValues = state.values;\n    let previousLength = previousValues.length;\n    state.values = args;\n    for (let i = 0; i < args.length; i++) {\n        // If we've rendered a higher-priority value already, stop.\n        if (i > state.lastRenderedIndex) {\n            break;\n        }\n        const value = args[i];\n        // Render non-Promise values immediately\n        if (isPrimitive(value) ||\n            typeof value.then !== 'function') {\n            part.setValue(value);\n            state.lastRenderedIndex = i;\n            // Since a lower-priority value will never overwrite a higher-priority\n            // synchronous value, we can stop processing now.\n            break;\n        }\n        // If this is a Promise we've already handled, skip it.\n        if (i < previousLength && value === previousValues[i]) {\n            continue;\n        }\n        // We have a Promise that we haven't seen before, so priorities may have\n        // changed. Forget what we rendered before.\n        state.lastRenderedIndex = _infinity;\n        previousLength = 0;\n        Promise.resolve(value).then((resolvedValue) => {\n            const index = state.values.indexOf(value);\n            // If state.values doesn't contain the value, we've re-rendered without\n            // the value, so don't render it. Then, only render if the value is\n            // higher-priority than what's already been rendered.\n            if (index > -1 && index < state.lastRenderedIndex) {\n                state.lastRenderedIndex = index;\n                part.setValue(resolvedValue);\n                part.commit();\n            }\n        });\n    }\n});\n//# sourceMappingURL=until.js.map","import { AttributePart, Directive } from 'lit-html';\n\nconst detached = new WeakMap();\n\nexport default class Detach extends Directive {\n  ifFn: () => boolean;\n\n  constructor(ifFn: () => boolean) {\n    super();\n    this.ifFn = ifFn;\n  }\n\n  body(part: AttributePart) {\n    const detach = this.ifFn();\n    const element = part.committer.element;\n    if (detach) {\n      if (!detached.has(part)) {\n        const nextSibling = element.nextSibling;\n        detached.set(part, { element, nextSibling });\n      }\n      element.remove();\n    } else {\n      const data = detached.get(part);\n      if (typeof data !== 'undefined' && data !== null) {\n        data.nextSibling.parentNode.insertBefore(data.element, data.nextSibling);\n        detached.delete(part);\n      }\n    }\n  }\n}\n","import { Directive, Part } from 'lit-html';\nexport interface StyleInfo {\n  [key: string]: string;\n}\n\nconst toRemove = [],\n  toUpdate = [];\n\nexport default class StyleMap extends Directive {\n  previous: {};\n  style: {};\n  detach: boolean;\n\n  constructor(styleInfo: StyleInfo, detach: boolean = false) {\n    super();\n    this.previous = {};\n    this.style = styleInfo;\n    this.detach = detach;\n  }\n\n  setStyle(styleInfo: StyleInfo) {\n    this.style = styleInfo;\n  }\n\n  setDetach(detach) {\n    this.detach = detach;\n  }\n\n  body(part: Part) {\n    toRemove.length = 0;\n    toUpdate.length = 0;\n    // @ts-ignore\n    const element = part.committer.element;\n    const style = element.style;\n    let previous = this.previous;\n    for (const name in previous) {\n      if (this.style[name] === undefined) {\n        toRemove.push(name);\n      }\n    }\n    for (const name in this.style) {\n      const value = this.style[name];\n      const prev = previous[name];\n      if (prev !== undefined && prev === value) {\n        continue;\n      }\n      toUpdate.push(name);\n    }\n\n    if (toRemove.length || toUpdate.length) {\n      let parent, nextSibling;\n      if (this.detach) {\n        parent = element.parentNode;\n        if (parent) {\n          nextSibling = element.nextSibling;\n          element.remove();\n        }\n      }\n      for (const name of toRemove) {\n        style.removeProperty(name);\n      }\n      for (const name of toUpdate) {\n        const value = this.style[name];\n        if (!name.includes('-')) {\n          style[name] = value;\n        } else {\n          style.setProperty(name, value);\n        }\n      }\n      if (this.detach && parent) {\n        parent.insertBefore(element, nextSibling);\n      }\n      this.previous = { ...this.style };\n    }\n  }\n}\n","class Action {\n  isAction: boolean = true;\n}\nAction.prototype.isAction = true;\nexport default Action;\n","import Action from './Action';\nexport interface Options {\n  element?: HTMLElement;\n  axis?: string;\n  threshold?: number;\n  onDown?: (data) => void;\n  onMove?: (data) => void;\n  onUp?: (data) => void;\n  onWheel?: (data) => void;\n}\n\nconst defaultOptions = {\n  element: document.createTextNode(''),\n  axis: 'xy',\n  threshold: 10,\n  onDown(data) {},\n  onMove(data) {},\n  onUp(data) {},\n  onWheel(data) {}\n};\n\nconst pointerEventsExists = typeof PointerEvent !== 'undefined';\nlet id = 0;\n\nexport default class PointerAction extends Action {\n  id: number;\n  moving: string = '';\n  initialX: number = 0;\n  initialY: number = 0;\n  lastY: number = 0;\n  lastX: number = 0;\n  element: HTMLElement;\n  options: Options;\n\n  constructor(element, data) {\n    super();\n    this.onPointerDown = this.onPointerDown.bind(this);\n    this.onPointerMove = this.onPointerMove.bind(this);\n    this.onPointerUp = this.onPointerUp.bind(this);\n    this.onWheel = this.onWheel.bind(this);\n    this.element = element;\n    this.id = ++id;\n    this.options = { ...defaultOptions, ...data.pointerOptions } as Options;\n    if (pointerEventsExists) {\n      element.addEventListener('pointerdown', this.onPointerDown);\n      document.addEventListener('pointermove', this.onPointerMove);\n      document.addEventListener('pointerup', this.onPointerUp);\n    } else {\n      element.addEventListener('touchstart', this.onPointerDown);\n      document.addEventListener('touchmove', this.onPointerMove, { passive: false });\n      document.addEventListener('touchend', this.onPointerUp);\n      document.addEventListener('touchcancel', this.onPointerUp);\n      element.addEventListener('mousedown', this.onPointerDown);\n      document.addEventListener('mousemove', this.onPointerMove, { passive: false });\n      document.addEventListener('mouseup', this.onPointerUp);\n    }\n  }\n\n  normalizeMouseWheelEvent(event) {\n    // @ts-ignore\n    let x = event.deltaX || 0;\n    // @ts-ignore\n    let y = event.deltaY || 0;\n    // @ts-ignore\n    let z = event.deltaZ || 0;\n    // @ts-ignore\n    const mode = event.deltaMode;\n    // @ts-ignore\n    const lineHeight = parseInt(getComputedStyle(event.target).getPropertyValue('line-height'));\n    let scale = 1;\n    switch (mode) {\n      case 1:\n        scale = lineHeight;\n        break;\n      case 2:\n        // @ts-ignore\n        scale = window.height;\n        break;\n    }\n    x *= scale;\n    y *= scale;\n    z *= scale;\n    return { x, y, z, event };\n  }\n\n  onWheel(event) {\n    const normalized = this.normalizeMouseWheelEvent(event);\n    this.options.onWheel(normalized);\n  }\n\n  normalizePointerEvent(event) {\n    let result = { x: 0, y: 0, pageX: 0, pageY: 0, clientX: 0, clientY: 0, screenX: 0, screenY: 0, event };\n    switch (event.type) {\n      case 'wheel':\n        const wheel = this.normalizeMouseWheelEvent(event);\n        result.x = wheel.x;\n        result.y = wheel.y;\n        result.pageX = result.x;\n        result.pageY = result.y;\n        result.screenX = result.x;\n        result.screenY = result.y;\n        result.clientX = result.x;\n        result.clientY = result.y;\n        break;\n      case 'touchstart':\n      case 'touchmove':\n      case 'touchend':\n      case 'touchcancel':\n        result.x = event.changedTouches[0].screenX;\n        result.y = event.changedTouches[0].screenY;\n        result.pageX = event.changedTouches[0].pageX;\n        result.pageY = event.changedTouches[0].pageY;\n        result.screenX = event.changedTouches[0].screenX;\n        result.screenY = event.changedTouches[0].screenY;\n        result.clientX = event.changedTouches[0].clientX;\n        result.clientY = event.changedTouches[0].clientY;\n        break;\n      default:\n        result.x = event.x;\n        result.y = event.y;\n        result.pageX = event.pageX;\n        result.pageY = event.pageY;\n        result.screenX = event.screenX;\n        result.screenY = event.screenY;\n        result.clientX = event.clientX;\n        result.clientY = event.clientY;\n        break;\n    }\n    return result;\n  }\n\n  onPointerDown(event) {\n    if (event.type === 'mousedown' && event.button !== 0) return;\n    this.moving = 'xy';\n    const normalized = this.normalizePointerEvent(event);\n    this.lastX = normalized.x;\n    this.lastY = normalized.y;\n    this.initialX = normalized.x;\n    this.initialY = normalized.y;\n    this.options.onDown(normalized);\n  }\n\n  handleX(normalized) {\n    let movementX = normalized.x - this.lastX;\n    this.lastY = normalized.y;\n    this.lastX = normalized.x;\n    return movementX;\n  }\n\n  handleY(normalized) {\n    let movementY = normalized.y - this.lastY;\n    this.lastY = normalized.y;\n    this.lastX = normalized.x;\n    return movementY;\n  }\n\n  onPointerMove(event) {\n    if (this.moving === '' || (event.type === 'mousemove' && event.button !== 0)) return;\n    const normalized = this.normalizePointerEvent(event);\n    if (this.options.axis === 'x|y') {\n      let movementX = 0,\n        movementY = 0;\n      if (\n        this.moving === 'x' ||\n        (this.moving === 'xy' && Math.abs(normalized.x - this.initialX) > this.options.threshold)\n      ) {\n        this.moving = 'x';\n        movementX = this.handleX(normalized);\n      }\n      if (\n        this.moving === 'y' ||\n        (this.moving === 'xy' && Math.abs(normalized.y - this.initialY) > this.options.threshold)\n      ) {\n        this.moving = 'y';\n        movementY = this.handleY(normalized);\n      }\n      this.options.onMove({\n        movementX,\n        movementY,\n        x: normalized.x,\n        y: normalized.y,\n        initialX: this.initialX,\n        initialY: this.initialY,\n        lastX: this.lastX,\n        lastY: this.lastY,\n        event\n      });\n    } else if (this.options.axis === 'xy') {\n      let movementX = 0,\n        movementY = 0;\n      if (Math.abs(normalized.x - this.initialX) > this.options.threshold) {\n        movementX = this.handleX(normalized);\n      }\n      if (Math.abs(normalized.y - this.initialY) > this.options.threshold) {\n        movementY = this.handleY(normalized);\n      }\n      this.options.onMove({\n        movementX,\n        movementY,\n        x: normalized.x,\n        y: normalized.y,\n        initialX: this.initialX,\n        initialY: this.initialY,\n        lastX: this.lastX,\n        lastY: this.lastY,\n        event\n      });\n    } else if (this.options.axis === 'x') {\n      if (\n        this.moving === 'x' ||\n        (this.moving === 'xy' && Math.abs(normalized.x - this.initialX) > this.options.threshold)\n      ) {\n        this.moving = 'x';\n        this.options.onMove({\n          movementX: this.handleX(normalized),\n          movementY: 0,\n          initialX: this.initialX,\n          initialY: this.initialY,\n          lastX: this.lastX,\n          lastY: this.lastY,\n          event\n        });\n      }\n    } else if (this.options.axis === 'y') {\n      let movementY = 0;\n      if (\n        this.moving === 'y' ||\n        (this.moving === 'xy' && Math.abs(normalized.y - this.initialY) > this.options.threshold)\n      ) {\n        this.moving = 'y';\n        movementY = this.handleY(normalized);\n      }\n      this.options.onMove({\n        movementX: 0,\n        movementY,\n        x: normalized.x,\n        y: normalized.y,\n        initialX: this.initialX,\n        initialY: this.initialY,\n        lastX: this.lastX,\n        lastY: this.lastY,\n        event\n      });\n    }\n  }\n\n  onPointerUp(event) {\n    this.moving = '';\n    const normalized = this.normalizePointerEvent(event);\n    this.options.onUp({\n      movementX: 0,\n      movementY: 0,\n      x: normalized.x,\n      y: normalized.y,\n      initialX: this.initialX,\n      initialY: this.initialY,\n      lastX: this.lastX,\n      lastY: this.lastY,\n      event\n    });\n    this.lastY = 0;\n    this.lastX = 0;\n  }\n\n  destroy(element) {\n    if (pointerEventsExists) {\n      element.removeEventListener('pointerdown', this.onPointerDown);\n      document.removeEventListener('pointermove', this.onPointerMove);\n      document.removeEventListener('pointerup', this.onPointerUp);\n    } else {\n      element.removeEventListener('mousedown', this.onPointerDown);\n      document.removeEventListener('mousemove', this.onPointerMove);\n      document.removeEventListener('mouseup', this.onPointerUp);\n      element.removeEventListener('touchstart', this.onPointerDown);\n      document.removeEventListener('touchmove', this.onPointerMove);\n      document.removeEventListener('touchend', this.onPointerUp);\n      document.removeEventListener('touchcancel', this.onPointerUp);\n    }\n  }\n}\n","/**\n * Schedule - a throttle function that uses requestAnimationFrame to limit the rate at which a function is called.\n *\n * @param {function} fn\n * @returns {function}\n */\nexport function schedule(fn: (argument) => void | any) {\n  let frameId = 0;\n  function wrapperFn(argument) {\n    if (frameId) {\n      return;\n    }\n    function executeFrame() {\n      frameId = 0;\n      fn.apply(undefined, [argument]);\n    }\n    frameId = requestAnimationFrame(executeFrame);\n  }\n  return wrapperFn;\n}\n\n/**\n * Is object - helper function to determine if specified variable is an object\n *\n * @param {any} item\n * @returns {boolean}\n */\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\n/**\n * Merge deep - helper function which will merge objects recursively - creating brand new one - like clone\n *\n * @param {object} target\n * @params {object} sources\n * @returns {object}\n */\nexport function mergeDeep(target, ...sources) {\n  const source = sources.shift();\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (typeof target[key] === 'undefined') {\n          target[key] = {};\n        }\n        target[key] = mergeDeep(target[key], source[key]);\n      } else if (Array.isArray(source[key])) {\n        target[key] = [];\n        for (let item of source[key]) {\n          if (isObject(item)) {\n            target[key].push(mergeDeep({}, item));\n            continue;\n          }\n          target[key].push(item);\n        }\n      } else {\n        target[key] = source[key];\n      }\n    }\n  }\n  if (!sources.length) {\n    return target;\n  }\n  return mergeDeep(target, ...sources);\n}\n\n/**\n * Clone helper function\n *\n * @param source\n * @returns {object} cloned source\n */\nexport function clone(source) {\n  if (typeof source.actions !== 'undefined') {\n    const actns = source.actions.map((action) => {\n      const result = { ...action };\n      const props = { ...result.props };\n      delete props.state;\n      delete props.api;\n      delete result.element;\n      result.props = props;\n      return result;\n    });\n    source.actions = actns;\n  }\n  return mergeDeep({}, source);\n}\n","import { render, html, directive, svg, Directive, NodePart } from 'lit-html';\nimport { asyncAppend } from 'lit-html/directives/async-append';\nimport { asyncReplace } from 'lit-html/directives/async-replace';\nimport { cache } from 'lit-html/directives/cache';\nimport { classMap } from 'lit-html/directives/class-map';\nimport { guard } from 'lit-html/directives/guard';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nimport { repeat } from 'lit-html/directives/repeat';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html';\nimport { until } from 'lit-html/directives/until';\nimport Detach from './Detach';\nimport StyleMap from './StyleMap';\nimport PointerAction from './PointerAction';\nimport getPublicComponentMethods from './PublicComponentMethods';\nimport getActionsCollector from './ActionsCollector';\nimport getInternalComponentMethods from './InternalComponentMethods';\nimport { schedule, clone } from './helpers';\nimport Action from './Action';\n\nimport * as lithtml from 'lit-html';\nexport {\n  lithtml,\n  Action,\n  Directive,\n  schedule,\n  Detach,\n  StyleMap,\n  PointerAction,\n  asyncAppend,\n  asyncReplace,\n  cache,\n  classMap,\n  guard,\n  ifDefined,\n  repeat,\n  unsafeHTML,\n  until\n};\n\n/* dev imports\nimport { render, html, directive, svg, Part } from '../lit-html';\nimport { asyncAppend } from '../lit-html/directives/async-append';\nimport { asyncReplace } from '../lit-html/directives/async-replace';\nimport { cache } from '../lit-html/directives/cache';\nimport { classMap } from '../lit-html/directives/class-map';\nimport { guard } from '../lit-html/directives/guard';\nimport { ifDefined } from '../lit-html/directives/if-defined';\nimport { repeat } from '../lit-html/directives/repeat';\nimport { unsafeHTML } from '../lit-html/directives/unsafe-html';\nimport { until } from '../lit-html/directives/until';\nimport { Directive } from '../lit-html/lib/directive';\n*/\n\n/**\n * Vido library\n *\n * @param {any} state - state management for the view (can be anything)\n * @param {any} api - some api's or other globally available services\n * @returns {object} vido instance\n */\nexport default function Vido(state, api) {\n  let componentId = 0;\n  const components = new Map();\n  let actionsByInstance = new Map();\n  let app, element;\n  let shouldUpdateCount = 0;\n  const resolved = Promise.resolve();\n  const additionalMethods = {};\n\n  const ActionsCollector = getActionsCollector(actionsByInstance);\n\n  class InstanceActionsCollector {\n    instance: string;\n    constructor(instance: string) {\n      this.instance = instance;\n    }\n    create(actions: unknown[], props: object) {\n      const actionsInstance = new ActionsCollector(this.instance);\n      actionsInstance.set(actions, props);\n      return actionsInstance;\n    }\n  }\n\n  const PublicComponentMethods = getPublicComponentMethods(components, actionsByInstance, clone);\n\n  /**\n   * Create vido instance for component\n   */\n  function vido() {\n    this.destroyable = [];\n    this.onChangeFunctions = [];\n    this.debug = false;\n    this.state = state;\n    this.api = api;\n    this.lastProps = {};\n    this.reuseComponents = this.reuseComponents.bind(this);\n    this.onDestroy = this.onDestroy.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.update = this.update.bind(this);\n    for (const name in additionalMethods) {\n      this[name] = additionalMethods[name];\n    }\n  }\n\n  vido.prototype.html = html;\n  vido.prototype.svg = svg;\n  vido.prototype.directive = directive;\n  vido.prototype.asyncAppend = asyncAppend;\n  vido.prototype.asyncReplace = asyncReplace;\n  vido.prototype.cache = cache;\n  vido.prototype.classMap = classMap;\n  vido.prototype.guard = guard;\n  vido.prototype.ifDefined = ifDefined;\n  vido.prototype.repeat = repeat;\n  vido.prototype.unsafeHTML = unsafeHTML;\n  vido.prototype.until = until;\n  vido.prototype.schedule = schedule;\n  vido.prototype.actionsByInstance = (componentActions, props) => {};\n  vido.prototype.StyleMap = StyleMap;\n  vido.prototype.Detach = Detach;\n  vido.prototype.PointerAction = PointerAction;\n  vido.prototype.addMethod = function addMethod(name: string, body: (...args: unknown[]) => unknown) {\n    additionalMethods[name] = body;\n  };\n\n  vido.prototype.Action = Action;\n\n  vido.prototype.onDestroy = function onDestroy(fn) {\n    this.destroyable.push(fn);\n  };\n  vido.prototype.onChange = function onChange(fn) {\n    this.onChangeFunctions.push(fn);\n  };\n  vido.prototype.update = function update() {\n    this.updateTemplate();\n  };\n\n  /**\n   * Reuse existing components when your data was changed\n   *\n   * @param {array} currentComponents - array of components\n   * @param {array} dataArray  - any data as array for each component\n   * @param {function} getProps - you can pass params to component from array item ( example: item=>({id:item.id}) )\n   * @param {function} component - what kind of components do you want to create?\n   * @param {boolean} leaveTail - leave last elements and do not destroy corresponding components\n   * @returns {array} of components (with updated/destroyed/created ones)\n   */\n  vido.prototype.reuseComponents = function reuseComponents(\n    currentComponents,\n    dataArray,\n    getProps,\n    component,\n    leaveTail = true\n  ) {\n    const modified = [];\n    const currentLen = currentComponents.length;\n    const dataLen = dataArray.length;\n    let leave = false;\n    if (leaveTail && (dataArray === undefined || dataArray.length === 0)) {\n      leave = true;\n    }\n    let leaveStartingAt = 0;\n    if (currentLen < dataLen) {\n      let diff = dataLen - currentLen;\n      while (diff) {\n        const item = dataArray[dataLen - diff];\n        const newComponent = this.createComponent(component, getProps(item));\n        currentComponents.push(newComponent);\n        modified.push(newComponent.instance);\n        diff--;\n      }\n    } else if (currentLen > dataLen) {\n      let diff = currentLen - dataLen;\n      if (leaveTail) {\n        leave = true;\n        leaveStartingAt = currentLen - diff;\n      }\n      while (diff) {\n        const index = currentLen - diff;\n        if (!leaveTail) {\n          modified.push(currentComponents[index].instance);\n          currentComponents[index].destroy();\n        }\n        diff--;\n      }\n      if (!leaveTail) {\n        currentComponents.length = dataLen;\n      }\n    }\n    let index = 0;\n    for (const component of currentComponents) {\n      const item = dataArray[index];\n      if (!modified.includes(component.instance)) {\n        component.change(getProps(item), { leave: leave && index >= leaveStartingAt });\n      }\n      index++;\n    }\n    return currentComponents;\n  };\n\n  const InternalComponentMethods = getInternalComponentMethods(components, actionsByInstance, clone);\n\n  /**\n   * Create component\n   *\n   * @param {function} component\n   * @param {any} props\n   * @returns {object} component instance methods\n   */\n  function createComponent(component, props = {}) {\n    const instance = component.name + ':' + componentId++;\n    let vidoInstance;\n    vidoInstance = new vido();\n    vidoInstance.instance = instance;\n    vidoInstance.name = component.name;\n    vidoInstance.Actions = new InstanceActionsCollector(instance);\n    const publicMethods = new PublicComponentMethods(instance, vidoInstance, props);\n    const internalMethods = new InternalComponentMethods(instance, vidoInstance, component(vidoInstance, props));\n    components.set(instance, internalMethods);\n    components.get(instance).change(props);\n    if (vidoInstance.debug) {\n      console.groupCollapsed(`component created ${instance}`);\n      console.log(clone({ props, components: components.keys(), actionsByInstance }));\n      console.trace();\n      console.groupEnd();\n    }\n    return publicMethods;\n  }\n  vido.prototype.createComponent = createComponent;\n\n  vido.prototype.Slot = class Slot extends Directive {\n    components = [];\n    props: unknown;\n\n    constructor(components: unknown, props: unknown) {\n      super();\n      if (typeof components === undefined) {\n        return undefined;\n      }\n      this.props = props;\n      if (Array.isArray(components)) {\n        for (const component of components) {\n          this.components.push(createComponent(component, props));\n        }\n      }\n    }\n\n    body(part: NodePart) {\n      part.setValue(this.components.map((component) => component.html()));\n    }\n  };\n\n  /**\n   * Destroy component\n   *\n   * @param {string} instance\n   * @param {object} vidoInstance\n   */\n  vido.prototype.destroyComponent = function destroyComponent(instance, vidoInstance) {\n    if (vidoInstance.debug) {\n      console.groupCollapsed(`destroying component ${instance}...`);\n      console.log(clone({ components: components.keys(), actionsByInstance }));\n      console.trace();\n      console.groupEnd();\n    }\n    if (actionsByInstance.has(instance)) {\n      for (const action of actionsByInstance.get(instance)) {\n        if (typeof action.componentAction.destroy === 'function') {\n          action.componentAction.destroy(action.element, action.props);\n        }\n      }\n    }\n    actionsByInstance.delete(instance);\n    components.get(instance).destroy();\n    components.delete(instance);\n    if (vidoInstance.debug) {\n      console.groupCollapsed(`component destroyed ${instance}`);\n      console.log(clone({ components: components.keys(), actionsByInstance }));\n      console.trace();\n      console.groupEnd();\n    }\n  };\n\n  /**\n   * Update template - trigger render proccess\n   * @param {object} vidoInstance\n   */\n  vido.prototype.updateTemplate = function updateTemplate() {\n    const currentShouldUpdateCount = ++shouldUpdateCount;\n    const self = this;\n    function flush() {\n      if (currentShouldUpdateCount === shouldUpdateCount) {\n        shouldUpdateCount = 0;\n        self.render();\n      }\n    }\n    resolved.then(flush);\n  };\n\n  /**\n   * Create app\n   *\n   * @param config\n   * @returns {object} component instance methods\n   */\n  vido.prototype.createApp = function createApp(config) {\n    element = config.element;\n    const App = this.createComponent(config.component, config.props);\n    app = App.instance;\n    this.render();\n    return App;\n  };\n\n  /**\n   * Execute actions\n   */\n  vido.prototype.executeActions = function executeActions() {\n    for (const actions of actionsByInstance.values()) {\n      for (const action of actions) {\n        if (action.element.vido === undefined) {\n          const componentAction = action.componentAction;\n          const create = componentAction.create;\n          if (typeof create !== 'undefined') {\n            let result;\n            if (\n              create.prototype?.isAction !== true &&\n              create.isAction === undefined &&\n              create.prototype?.update === undefined &&\n              create.prototype?.destroy === undefined\n            ) {\n              result = create(action.element, action.props);\n            } else {\n              result = new create(action.element, action.props);\n            }\n            if (result !== undefined) {\n              if (typeof result === 'function') {\n                componentAction.destroy = result;\n              } else {\n                if (typeof result.update === 'function') {\n                  componentAction.update = result.update.bind(result);\n                }\n                if (typeof result.destroy === 'function') {\n                  componentAction.destroy = result.destroy.bind(result);\n                }\n              }\n            }\n          }\n        } else {\n          action.element.vido = action.props;\n          if (typeof action.componentAction.update === 'function') {\n            action.componentAction.update(action.element, action.props);\n          }\n        }\n      }\n      for (const action of actions) {\n        action.element.vido = action.props;\n      }\n    }\n  };\n\n  /**\n   * Render view\n   */\n  vido.prototype.render = function renderView() {\n    render(components.get(app).update(), element);\n    this.executeActions();\n  };\n\n  return new vido();\n}\n","import { Directive, AttributePart } from 'lit-html';\n\nexport default function getActionsCollector(actionsByInstance) {\n  return class ActionsCollector extends Directive {\n    instance: string;\n    actions: unknown[];\n    props: unknown;\n\n    constructor(instance) {\n      super();\n      this.instance = instance;\n    }\n\n    set(actions: unknown[], props: object) {\n      this.actions = actions;\n      this.props = props;\n      // props must be mutable! (do not do this -> {...props})\n      // because we will modify action props with onChange and can reuse existin instance\n      return this;\n    }\n\n    body(part: AttributePart) {\n      const element = part.committer.element as HTMLElement;\n      for (const create of this.actions) {\n        if (typeof create !== 'undefined') {\n          let exists;\n          if (actionsByInstance.has(this.instance)) {\n            for (const action of actionsByInstance.get(this.instance)) {\n              if (action.componentAction.create === create && action.element === element) {\n                exists = action;\n                break;\n              }\n            }\n          }\n          if (!exists) {\n            // @ts-ignore\n            if (typeof element.vido !== 'undefined') delete element.vido;\n            const componentAction = { create, update() {}, destroy() {} };\n            const action = { instance: this.instance, componentAction, element, props: this.props };\n            let byInstance = [];\n            if (actionsByInstance.has(this.instance)) {\n              byInstance = actionsByInstance.get(this.instance);\n            }\n            byInstance.push(action);\n            actionsByInstance.set(this.instance, byInstance);\n          } else {\n            exists.props = this.props;\n          }\n        }\n      }\n    }\n  };\n}\n","export default function getPublicComponentMethods(components, actionsByInstance, clone) {\n  return class PublicComponentMethods {\n    instance: string;\n    vidoInstance: any;\n    props: any;\n    name: string;\n\n    constructor(instance, vidoInstance, props = {}) {\n      this.instance = instance;\n      this.name = vidoInstance.name;\n      this.vidoInstance = vidoInstance;\n      this.props = props;\n      this.destroy = this.destroy.bind(this);\n      this.update = this.update.bind(this);\n      this.change = this.change.bind(this);\n      this.html = this.html.bind(this);\n    }\n\n    /**\n     * Destroy component\n     */\n    destroy() {\n      if (this.vidoInstance.debug) {\n        console.groupCollapsed(`destroying component ${this.instance}`);\n        console.log(clone({ components: components.keys(), actionsByInstance }));\n        console.trace();\n        console.groupEnd();\n      }\n      return this.vidoInstance.destroyComponent(this.instance, this.vidoInstance);\n    }\n\n    /**\n     * Update template - trigger rendering process\n     */\n    update() {\n      if (this.vidoInstance.debug) {\n        console.groupCollapsed(`updating component ${this.instance}`);\n        console.log(clone({ components: components.keys(), actionsByInstance }));\n        console.trace();\n        console.groupEnd();\n      }\n      return this.vidoInstance.updateTemplate(this.vidoInstance);\n    }\n\n    /**\n     * Change component input properties\n     * @param {any} newProps\n     */\n    change(newProps, options) {\n      if (this.vidoInstance.debug) {\n        console.groupCollapsed(`changing component ${this.instance}`);\n        console.log(clone({ props: this.props, newProps: newProps, components: components.keys(), actionsByInstance }));\n        console.trace();\n        console.groupEnd();\n      }\n      components.get(this.instance).change(newProps, options);\n    }\n\n    /**\n     * Get component lit-html template\n     * @param {} templateProps\n     */\n    html(templateProps = {}) {\n      return components.get(this.instance).update(templateProps, this.vidoInstance);\n    }\n  };\n}\n","export default function getInternalComponentMethods(components, actionsByInstance, clone) {\n  return class InternalComponentMethods {\n    instance: string;\n    vidoInstance: any;\n    updateFunction: (changedProps: any) => void;\n\n    constructor(instance, vidoInstance, updateFunction) {\n      this.instance = instance;\n      this.vidoInstance = vidoInstance;\n      this.updateFunction = updateFunction;\n    }\n\n    destroy() {\n      if (this.vidoInstance.debug) {\n        console.groupCollapsed(`component destroy method fired ${this.instance}`);\n        console.log(\n          clone({\n            props: this.vidoInstance.props,\n            components: components.keys(),\n            destroyable: this.vidoInstance.destroyable,\n            actionsByInstance\n          })\n        );\n        console.trace();\n        console.groupEnd();\n      }\n      for (const d of this.vidoInstance.destroyable) {\n        d();\n      }\n      this.vidoInstance.onChangeFunctions = [];\n      this.vidoInstance.destroyable = [];\n    }\n\n    update(props = {}) {\n      if (this.vidoInstance.debug) {\n        console.groupCollapsed(`component update method fired ${this.instance}`);\n        console.log(clone({ components: components.keys(), actionsByInstance }));\n        console.trace();\n        console.groupEnd();\n      }\n      return this.updateFunction(props);\n    }\n\n    change(changedProps, options = { leave: false }) {\n      const props = changedProps;\n      if (this.vidoInstance.debug) {\n        console.groupCollapsed(`component change method fired ${this.instance}`);\n        console.log(\n          clone({\n            props,\n            components: components.keys(),\n            onChangeFunctions: this.vidoInstance.onChangeFunctions,\n            changedProps,\n            actionsByInstance\n          })\n        );\n        console.trace();\n        console.groupEnd();\n      }\n      for (const fn of this.vidoInstance.onChangeFunctions) {\n        fn(changedProps, options);\n      }\n    }\n  };\n}\n"],"names":["directive","f","args","d","isDirective","Directive","[object Object]","this","isClass","_part","part","body","o","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","reparentNodes","container","start","end","before","n","nextSibling","insertBefore","removeNodes","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","result","element","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","sanitizer","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","previousSibling","pop","str","suffix","isTemplatePartActive","markerNode","createComment","cloneNode","TemplateInstance","template","processor","options","__parts","setValue","commit","fragment","importNode","nodeIndex","nodeName","textPart","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","policy","commentMarker","emptyTemplateNode","createElement","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","innerHTML","value","w","trustedTypes","TrustedTypes","createPolicy","createHTML","convertConstantTemplateStringToTrustedHTML","getHTML","SVGTemplateResult","super","getTemplateElement","svgElement","firstChild","isPrimitive","isIterable","Array","isArray","Symbol","iterator","identityFunction","noopSanitizer","_node","_name","_type","sanitizerFactory","emptyTextNode","AttributeCommitter","templatePart","kind","dirty","_createPart","AttributePart","v","text","t","_getValue","setAttribute","committer","runPart","NodePart","__pendingValue","textSanitizer","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","renderedValue","textNode","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","DefaultTemplateProcessor","prefix","nodeTemplatePart","defaultTemplateProcessor","templateCache","templateCaches","get","stringsArray","WeakMap","keyString","Map","set","key","join","render","Object","assign","appendInto","svg","newSanitizer","__asyncValues","asyncIterator","TypeError","m","__values","verb","Promise","resolve","reject","then","done","settle","asyncAppend","mapper","async","e_1","_a","value_1_1","value_1","next","itemStartNode","e_1_1","error","return","asyncReplace","cache","previousValue","cachedTemplate","nodes","createDocumentFragment","previousClassesCache","classMap","classInfo","previousClasses","className","Set","classList","forEach","remove","delete","has","add","previousValues","guard","every","from","ifDefined","createAndInsertPart","containerPart","beforePart","beforeNode","newPart","updatePart","insertPartBefore","removePart","generateMap","list","map","partListCache","keyListCache","repeat","items","keyFnOrTemplate","keyFn","oldParts","oldKeys","newParts","newValues","newKeys","newKeyToIndexMap","oldKeyToIndexMap","oldHead","oldTail","newHead","newTail","oldIndex","oldPart","unsafeHTML","_state","until","state","lastRenderedIndex","previousLength","resolvedValue","detached","Detach","ifFn","detach","toRemove","toUpdate","StyleMap","styleInfo","previous","style","prev","removeProperty","includes","setProperty","Action","prototype","isAction","defaultOptions","axis","threshold","pointerEventsExists","PointerEvent","id","PointerAction","onPointerDown","bind","onPointerMove","onPointerUp","onWheel","pointerOptions","x","deltaX","y","deltaY","z","deltaZ","mode","deltaMode","lineHeight","parseInt","getComputedStyle","target","getPropertyValue","scale","height","normalized","normalizeMouseWheelEvent","pageX","pageY","clientX","clientY","screenX","screenY","wheel","changedTouches","button","moving","normalizePointerEvent","lastX","lastY","initialX","initialY","onDown","movementX","movementY","abs","handleX","handleY","onMove","onUp","schedule","fn","frameId","argument","requestAnimationFrame","apply","isObject","clone","source","actions","actns","action","props","api","mergeDeep","sources","shift","componentId","components","app","actionsByInstance","shouldUpdateCount","resolved","additionalMethods","ActionsCollector","create","exists","componentAction","vido","byInstance","getActionsCollector","InstanceActionsCollector","actionsInstance","PublicComponentMethods","vidoInstance","destroy","change","debug","console","groupCollapsed","log","keys","trace","groupEnd","destroyComponent","updateTemplate","newProps","templateProps","getPublicComponentMethods","destroyable","onChangeFunctions","lastProps","reuseComponents","onDestroy","onChange","componentActions","addMethod","currentComponents","dataArray","getProps","component","leaveTail","modified","currentLen","dataLen","leave","leaveStartingAt","diff","newComponent","createComponent","InternalComponentMethods","updateFunction","changedProps","getInternalComponentMethods","Actions","publicMethods","internalMethods","Slot","currentShouldUpdateCount","self","createApp","config","App","executeActions"],"mappings":"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"}