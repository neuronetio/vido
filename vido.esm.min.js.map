{"version":3,"file":"vido.esm.min.js","sources":["node_modules/lit-html/lib/directive.js","node_modules/lit-html/lib/dom.js","node_modules/lit-html/lib/part.js","node_modules/lit-html/lib/template.js","node_modules/lit-html/lib/template-instance.js","node_modules/lit-html/lib/template-result.js","node_modules/lit-html/lib/parts.js","node_modules/lit-html/lib/default-template-processor.js","node_modules/lit-html/lib/template-factory.js","node_modules/lit-html/lib/render.js","node_modules/lit-html/lit-html.js","node_modules/lit-html/directives/async-append.js","node_modules/lit-html/directives/async-replace.js","node_modules/lit-html/directives/cache.js","node_modules/lit-html/directives/class-map.js","node_modules/lit-html/directives/guard.js","node_modules/lit-html/directives/if-defined.js","node_modules/lit-html/directives/repeat.js","node_modules/lit-html/directives/style-map.js","node_modules/lit-html/directives/unsafe-html.js","node_modules/lit-html/directives/until.js","vido.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nimport { createMarker, directive, NodePart } from '../lit-html.js';\n/**\n * A directive that renders the items of an async iterable[1], appending new\n * values after previous values, similar to the built-in support for iterables.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is appended to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://github.com/tc39/proposal-async-iteration\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncAppend = directive((value, mapper) => async (part) => {\n    var e_1, _a;\n    if (!(part instanceof NodePart)) {\n        throw new Error('asyncAppend can only be used in text bindings');\n    }\n    // If we've already set up this particular iterable, we don't need\n    // to do anything.\n    if (value === part.value) {\n        return;\n    }\n    part.value = value;\n    // We keep track of item Parts across iterations, so that we can\n    // share marker nodes between consecutive Parts.\n    let itemPart;\n    let i = 0;\n    try {\n        for (var value_1 = __asyncValues(value), value_1_1; value_1_1 = await value_1.next(), !value_1_1.done;) {\n            let v = value_1_1.value;\n            // Check to make sure that value is the still the current value of\n            // the part, and if not bail because a new value owns this part\n            if (part.value !== value) {\n                break;\n            }\n            // When we get the first value, clear the part. This lets the\n            // previous value display until we can replace it.\n            if (i === 0) {\n                part.clear();\n            }\n            // As a convenience, because functional-programming-style\n            // transforms of iterables and async iterables requires a library,\n            // we accept a mapper function. This is especially convenient for\n            // rendering a template for each item.\n            if (mapper !== undefined) {\n                // This is safe because T must otherwise be treated as unknown by\n                // the rest of the system.\n                v = mapper(v, i);\n            }\n            // Like with sync iterables, each item induces a Part, so we need\n            // to keep track of start and end nodes for the Part.\n            // Note: Because these Parts are not updatable like with a sync\n            // iterable (if we render a new value, we always clear), it may\n            // be possible to optimize away the Parts and just re-use the\n            // Part.setValue() logic.\n            let itemStartNode = part.startNode;\n            // Check to see if we have a previous item and Part\n            if (itemPart !== undefined) {\n                // Create a new node to separate the previous and next Parts\n                itemStartNode = createMarker();\n                // itemPart is currently the Part for the previous item. Set\n                // it's endNode to the node we'll use for the next Part's\n                // startNode.\n                itemPart.endNode = itemStartNode;\n                part.endNode.parentNode.insertBefore(itemStartNode, part.endNode);\n            }\n            itemPart = new NodePart(part.options);\n            itemPart.insertAfterNode(itemStartNode);\n            itemPart.setValue(v);\n            itemPart.commit();\n            i++;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (value_1_1 && !value_1_1.done && (_a = value_1.return)) await _a.call(value_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n});\n//# sourceMappingURL=async-append.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nimport { directive, NodePart } from '../lit-html.js';\n/**\n * A directive that renders the items of an async iterable[1], replacing\n * previous values with new values, so that only one value is ever rendered\n * at a time.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is rendered to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://github.com/tc39/proposal-async-iteration\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncReplace = directive((value, mapper) => async (part) => {\n    var e_1, _a;\n    if (!(part instanceof NodePart)) {\n        throw new Error('asyncReplace can only be used in text bindings');\n    }\n    // If we've already set up this particular iterable, we don't need\n    // to do anything.\n    if (value === part.value) {\n        return;\n    }\n    // We nest a new part to keep track of previous item values separately\n    // of the iterable as a value itself.\n    const itemPart = new NodePart(part.options);\n    part.value = value;\n    let i = 0;\n    try {\n        for (var value_1 = __asyncValues(value), value_1_1; value_1_1 = await value_1.next(), !value_1_1.done;) {\n            let v = value_1_1.value;\n            // Check to make sure that value is the still the current value of\n            // the part, and if not bail because a new value owns this part\n            if (part.value !== value) {\n                break;\n            }\n            // When we get the first value, clear the part. This let's the\n            // previous value display until we can replace it.\n            if (i === 0) {\n                part.clear();\n                itemPart.appendIntoPart(part);\n            }\n            // As a convenience, because functional-programming-style\n            // transforms of iterables and async iterables requires a library,\n            // we accept a mapper function. This is especially convenient for\n            // rendering a template for each item.\n            if (mapper !== undefined) {\n                // This is safe because T must otherwise be treated as unknown by\n                // the rest of the system.\n                v = mapper(v, i);\n            }\n            itemPart.setValue(v);\n            itemPart.commit();\n            i++;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (value_1_1 && !value_1_1.done && (_a = value_1.return)) await _a.call(value_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n});\n//# sourceMappingURL=async-replace.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateInstance } from '../lib/template-instance.js';\nimport { directive, NodePart, reparentNodes, TemplateResult } from '../lit-html.js';\nconst templateCaches = new WeakMap();\n/**\n * Enables fast switching between multiple templates by caching the DOM nodes\n * and TemplateInstances produced by the templates.\n *\n * Example:\n *\n * ```\n * let checked = false;\n *\n * html`\n *   ${cache(checked ? html`input is checked` : html`input is not checked`)}\n * `\n * ```\n */\nexport const cache = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('cache can only be used in text bindings');\n    }\n    let templateCache = templateCaches.get(part);\n    if (templateCache === undefined) {\n        templateCache = new WeakMap();\n        templateCaches.set(part, templateCache);\n    }\n    const previousValue = part.value;\n    // First, can we update the current TemplateInstance, or do we need to move\n    // the current nodes into the cache?\n    if (previousValue instanceof TemplateInstance) {\n        if (value instanceof TemplateResult &&\n            previousValue.template === part.options.templateFactory(value)) {\n            // Same Template, just trigger an update of the TemplateInstance\n            part.setValue(value);\n            return;\n        }\n        else {\n            // Not the same Template, move the nodes from the DOM into the cache.\n            let cachedTemplate = templateCache.get(previousValue.template);\n            if (cachedTemplate === undefined) {\n                cachedTemplate = {\n                    instance: previousValue,\n                    nodes: document.createDocumentFragment(),\n                };\n                templateCache.set(previousValue.template, cachedTemplate);\n            }\n            reparentNodes(cachedTemplate.nodes, part.startNode.nextSibling, part.endNode);\n        }\n    }\n    // Next, can we reuse nodes from the cache?\n    if (value instanceof TemplateResult) {\n        const template = part.options.templateFactory(value);\n        const cachedTemplate = templateCache.get(template);\n        if (cachedTemplate !== undefined) {\n            // Move nodes out of cache\n            part.setValue(cachedTemplate.nodes);\n            part.commit();\n            // Set the Part value to the TemplateInstance so it'll update it.\n            part.value = cachedTemplate.instance;\n        }\n    }\n    part.setValue(value);\n});\n//# sourceMappingURL=cache.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst classMapCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    // handle static classes\n    if (!classMapCache.has(part)) {\n        element.className = committer.strings.join(' ');\n    }\n    const { classList } = element;\n    // remove old classes that no longer apply\n    const oldInfo = classMapCache.get(part);\n    for (const name in oldInfo) {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n        }\n    }\n    // add new classes\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        if (!oldInfo || value !== oldInfo[name]) {\n            // We explicitly want a loose truthy check here because\n            // it seems more convenient that '' and 0 are skipped.\n            const method = value ? 'add' : 'remove';\n            classList[method](name);\n        }\n    }\n    classMapCache.set(part, classInfo);\n});\n//# sourceMappingURL=class-map.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { directive } from '../lit-html.js';\nconst previousValues = new WeakMap();\n/**\n * Prevents re-render of a template function until a single value or an array of\n * values changes.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([user.id, company.id], () => html`...`)}\n *   </div>\n * ```\n *\n * In this case, the template only renders if either `user.id` or `company.id`\n * changes.\n *\n * guard() is useful with immutable data patterns, by preventing expensive work\n * until data updates.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n *   </div>\n * ```\n *\n * In this case, items are mapped over only when the array reference changes.\n *\n * @param value the value to check before re-rendering\n * @param f the template function\n */\nexport const guard = directive((value, f) => (part) => {\n    const previousValue = previousValues.get(part);\n    if (Array.isArray(value)) {\n        // Dirty-check arrays by item\n        if (Array.isArray(previousValue) &&\n            previousValue.length === value.length &&\n            value.every((v, i) => v === previousValue[i])) {\n            return;\n        }\n    }\n    else if (previousValue === value &&\n        (value !== undefined || previousValues.has(part))) {\n        // Dirty-check non-arrays by identity\n        return;\n    }\n    part.setValue(f());\n    // Copy the value if it's an array so that if it's mutated we don't forget\n    // what the previous values were.\n    previousValues.set(part, Array.isArray(value) ? Array.from(value) : value);\n});\n//# sourceMappingURL=guard.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive } from '../lit-html.js';\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = directive((value) => (part) => {\n    if (value === undefined && part instanceof AttributePart) {\n        if (value !== part.value) {\n            const name = part.committer.name;\n            part.committer.element.removeAttribute(name);\n        }\n    }\n    else {\n        part.setValue(value);\n    }\n});\n//# sourceMappingURL=if-defined.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { createMarker, directive, NodePart, removeNodes, reparentNodes } from '../lit-html.js';\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart = (containerPart, beforePart) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = beforePart === undefined ? containerPart.endNode :\n        beforePart.startNode;\n    const startNode = container.insertBefore(createMarker(), beforeNode);\n    container.insertBefore(createMarker(), beforeNode);\n    const newPart = new NodePart(containerPart.options);\n    newPart.insertAfterNode(startNode);\n    return newPart;\n};\nconst updatePart = (part, value) => {\n    part.setValue(value);\n    part.commit();\n    return part;\n};\nconst insertPartBefore = (containerPart, part, ref) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = ref ? ref.startNode : containerPart.endNode;\n    const endNode = part.endNode.nextSibling;\n    if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n    }\n};\nconst removePart = (part) => {\n    removeNodes(part.startNode.parentNode, part.startNode, part.endNode.nextSibling);\n};\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list, start, end) => {\n    const map = new Map();\n    for (let i = start; i <= end; i++) {\n        map.set(list[i], i);\n    }\n    return map;\n};\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap();\nconst keyListCache = new WeakMap();\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * amd removals.\n *\n * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive((items, keyFnOrTemplate, template) => {\n    let keyFn;\n    if (template === undefined) {\n        template = keyFnOrTemplate;\n    }\n    else if (keyFnOrTemplate !== undefined) {\n        keyFn = keyFnOrTemplate;\n    }\n    return (containerPart) => {\n        if (!(containerPart instanceof NodePart)) {\n            throw new Error('repeat can only be used in text bindings');\n        }\n        // Old part & key lists are retrieved from the last update\n        // (associated with the part for this instance of the directive)\n        const oldParts = partListCache.get(containerPart) || [];\n        const oldKeys = keyListCache.get(containerPart) || [];\n        // New part list will be built up as we go (either reused from\n        // old parts or created for new keys in this update). This is\n        // saved in the above cache at the end of the update.\n        const newParts = [];\n        // New value list is eagerly generated from items along with a\n        // parallel array indicating its key.\n        const newValues = [];\n        const newKeys = [];\n        let index = 0;\n        for (const item of items) {\n            newKeys[index] = keyFn ? keyFn(item, index) : index;\n            newValues[index] = template(item, index);\n            index++;\n        }\n        // Maps from key to index for current and previous update; these\n        // are generated lazily only when needed as a performance\n        // optimization, since they are only required for multiple\n        // non-contiguous changes in the list, which are less common.\n        let newKeyToIndexMap;\n        let oldKeyToIndexMap;\n        // Head and tail pointers to old parts and new values\n        let oldHead = 0;\n        let oldTail = oldParts.length - 1;\n        let newHead = 0;\n        let newTail = newValues.length - 1;\n        // Overview of O(n) reconciliation algorithm (general approach\n        // based on ideas found in ivi, vue, snabbdom, etc.):\n        //\n        // * We start with the list of old parts and new values (and\n        //   arrays of their respective keys), head/tail pointers into\n        //   each, and we build up the new list of parts by updating\n        //   (and when needed, moving) old parts or creating new ones.\n        //   The initial scenario might look like this (for brevity of\n        //   the diagrams, the numbers in the array reflect keys\n        //   associated with the old parts or new values, although keys\n        //   and parts/values are actually stored in parallel arrays\n        //   indexed using the same head/tail pointers):\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n        //                                      item order\n        //      newHead ^                 ^ newTail\n        //\n        // * Iterate old & new lists from both sides, updating,\n        //   swapping, or removing parts at the head/tail locations\n        //   until neither head nor tail can move.\n        //\n        // * Example below: keys at head pointers match, so update old\n        //   part 0 in-place (no need to move it) and record part 0 in\n        //   the `newParts` list. The last thing we do is advance the\n        //   `oldHead` and `newHead` pointers (will be reflected in the\n        //   next diagram).\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //      newHead ^                 ^ newTail\n        //\n        // * Example below: head pointers don't match, but tail\n        //   pointers do, so update part 6 in place (no need to move\n        //   it), and record part 6 in the `newParts` list. Last,\n        //   advance the `oldTail` and `oldHead` pointers.\n        //\n        //         oldHead v              v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n        //                                      & newTail\n        //         newHead ^              ^ newTail\n        //\n        // * If neither head nor tail match; next check if one of the\n        //   old head/tail items was removed. We first need to generate\n        //   the reverse map of new keys to index (`newKeyToIndexMap`),\n        //   which is done once lazily as a performance optimization,\n        //   since we only hit this case if multiple non-contiguous\n        //   changes were made. Note that for contiguous removal\n        //   anywhere in the list, the head and tails would advance\n        //   from either end and pass each other before we get to this\n        //   case and removals would be handled in the final while loop\n        //   without needing to generate the map.\n        //\n        // * Example below: The key at `oldTail` was removed (no longer\n        //   in the `newKeyToIndexMap`), so remove that part from the\n        //   DOM and advance just the `oldTail` pointer.\n        //\n        //         oldHead v           v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n        //         newHead ^           ^ newTail\n        //\n        // * Once head and tail cannot move, any mismatches are due to\n        //   either new or moved items; if a new key is in the previous\n        //   \"old key to old index\" map, move the old part to the new\n        //   location, otherwise create and insert a new part. Note\n        //   that when moving an old part we null its position in the\n        //   oldParts array if it lies between the head and tail so we\n        //   know to skip it when the pointers get there.\n        //\n        // * Example below: neither head nor tail match, and neither\n        //   were removed; so find the `newHead` key in the\n        //   `oldKeyToIndexMap`, and move that old part's DOM into the\n        //   next head position (before `oldParts[oldHead]`). Last,\n        //   null the part in the `oldPart` array since it was\n        //   somewhere in the remaining oldParts still to be scanned\n        //   (between the head and tail pointers) so that we know to\n        //   skip that old part on future iterations.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n        //                                      newHead\n        //         newHead ^           ^ newTail\n        //\n        // * Note that for moves/insertions like the one above, a part\n        //   inserted at the head pointer is inserted before the\n        //   current `oldParts[oldHead]`, and a part inserted at the\n        //   tail pointer is inserted before `newParts[newTail+1]`. The\n        //   seeming asymmetry lies in the fact that new parts are\n        //   moved into place outside in, so to the right of the head\n        //   pointer are old parts, and to the right of the tail\n        //   pointer are new parts.\n        //\n        // * We always restart back from the top of the algorithm,\n        //   allowing matching and simple updates in place to\n        //   continue...\n        //\n        // * Example below: the head pointers once again match, so\n        //   simply update part 1 and record it in the `newParts`\n        //   array.  Last, advance both head pointers.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //            newHead ^        ^ newTail\n        //\n        // * As mentioned above, items that were moved as a result of\n        //   being stuck (the final else clause in the code below) are\n        //   marked with null, so we always advance old pointers over\n        //   these so we're comparing the next actual old value on\n        //   either end.\n        //\n        // * Example below: `oldHead` is null (already placed in\n        //   newParts), so advance `oldHead`.\n        //\n        //            oldHead v     v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n        //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //               newHead ^     ^ newTail\n        //\n        // * Note it's not critical to mark old parts as null when they\n        //   are moved from head to tail or tail to head, since they\n        //   will be outside the pointer range and never visited again.\n        //\n        // * Example below: Here the old tail key matches the new head\n        //   key, so the part at the `oldTail` position and move its\n        //   DOM to the new head position (before `oldParts[oldHead]`).\n        //   Last, advance `oldTail` and `newHead` pointers.\n        //\n        //               oldHead v  v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n        //                                     advance oldTail & newHead\n        //               newHead ^     ^ newTail\n        //\n        // * Example below: Old and new head keys match, so update the\n        //   old head part in place, and advance the `oldHead` and\n        //   `newHead` pointers.\n        //\n        //               oldHead v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n        //                                      newHead\n        //                  newHead ^  ^ newTail\n        //\n        // * Once the new or old pointers move past each other then all\n        //   we have left is additions (if old list exhausted) or\n        //   removals (if new list exhausted). Those are handled in the\n        //   final while loops at the end.\n        //\n        // * Example below: `oldHead` exceeded `oldTail`, so we're done\n        //   with the main loop.  Create the remaining part and insert\n        //   it at the new head position, and the update is complete.\n        //\n        //                   (oldHead > oldTail)\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //                     newHead ^ newTail\n        //\n        // * Note that the order of the if/else clauses is not\n        //   important to the algorithm, as long as the null checks\n        //   come first (to ensure we're always working on valid old\n        //   parts) and that the final else clause comes last (since\n        //   that's where the expensive moves occur). The order of\n        //   remaining clauses is is just a simple guess at which cases\n        //   will be most common.\n        //\n        // * TODO(kschaaf) Note, we could calculate the longest\n        //   increasing subsequence (LIS) of old items in new position,\n        //   and only move those not in the LIS set. However that costs\n        //   O(nlogn) time and adds a bit more code, and only helps\n        //   make rare types of mutations require fewer moves. The\n        //   above handles removes, adds, reversal, swaps, and single\n        //   moves of contiguous items in linear time, in the minimum\n        //   number of moves. As the number of multiple moves where LIS\n        //   might help approaches a random shuffle, the LIS\n        //   optimization becomes less helpful, so it seems not worth\n        //   the code at this point. Could reconsider if a compelling\n        //   case arises.\n        while (oldHead <= oldTail && newHead <= newTail) {\n            if (oldParts[oldHead] === null) {\n                // `null` means old part at head has already been used\n                // below; skip\n                oldHead++;\n            }\n            else if (oldParts[oldTail] === null) {\n                // `null` means old part at tail has already been used\n                // below; skip\n                oldTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newHead]) {\n                // Old head matches new head; update in place\n                newParts[newHead] =\n                    updatePart(oldParts[oldHead], newValues[newHead]);\n                oldHead++;\n                newHead++;\n            }\n            else if (oldKeys[oldTail] === newKeys[newTail]) {\n                // Old tail matches new tail; update in place\n                newParts[newTail] =\n                    updatePart(oldParts[oldTail], newValues[newTail]);\n                oldTail--;\n                newTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newTail]) {\n                // Old head matches new tail; update and move to new tail\n                newParts[newTail] =\n                    updatePart(oldParts[oldHead], newValues[newTail]);\n                insertPartBefore(containerPart, oldParts[oldHead], newParts[newTail + 1]);\n                oldHead++;\n                newTail--;\n            }\n            else if (oldKeys[oldTail] === newKeys[newHead]) {\n                // Old tail matches new head; update and move to new head\n                newParts[newHead] =\n                    updatePart(oldParts[oldTail], newValues[newHead]);\n                insertPartBefore(containerPart, oldParts[oldTail], oldParts[oldHead]);\n                oldTail--;\n                newHead++;\n            }\n            else {\n                if (newKeyToIndexMap === undefined) {\n                    // Lazily generate key-to-index maps, used for removals &\n                    // moves below\n                    newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n                    oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n                }\n                if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n                    // Old head is no longer in new list; remove\n                    removePart(oldParts[oldHead]);\n                    oldHead++;\n                }\n                else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n                    // Old tail is no longer in new list; remove\n                    removePart(oldParts[oldTail]);\n                    oldTail--;\n                }\n                else {\n                    // Any mismatches at this point are due to additions or\n                    // moves; see if we have an old part we can reuse and move\n                    // into place\n                    const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n                    const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n                    if (oldPart === null) {\n                        // No old part for this value; create a new one and\n                        // insert it\n                        const newPart = createAndInsertPart(containerPart, oldParts[oldHead]);\n                        updatePart(newPart, newValues[newHead]);\n                        newParts[newHead] = newPart;\n                    }\n                    else {\n                        // Reuse old part\n                        newParts[newHead] =\n                            updatePart(oldPart, newValues[newHead]);\n                        insertPartBefore(containerPart, oldPart, oldParts[oldHead]);\n                        // This marks the old part as having been used, so that\n                        // it will be skipped in the first two checks above\n                        oldParts[oldIndex] = null;\n                    }\n                    newHead++;\n                }\n            }\n        }\n        // Add parts for any remaining new values\n        while (newHead <= newTail) {\n            // For all remaining additions, we insert before last new\n            // tail, since old pointers are no longer valid\n            const newPart = createAndInsertPart(containerPart, newParts[newTail + 1]);\n            updatePart(newPart, newValues[newHead]);\n            newParts[newHead++] = newPart;\n        }\n        // Remove any remaining unused old parts\n        while (oldHead <= oldTail) {\n            const oldPart = oldParts[oldHead++];\n            if (oldPart !== null) {\n                removePart(oldPart);\n            }\n        }\n        // Save order of new parts for next round\n        partListCache.set(containerPart, newParts);\n        keyListCache.set(containerPart, newKeys);\n    };\n});\n//# sourceMappingURL=repeat.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the StyleInfo object applied to a given AttributePart.\n * Used to unset existing values when a new StyleInfo object is applied.\n */\nconst styleMapCache = new WeakMap();\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the `styleInfo`\n * object and adds the property values as CSS propertes. Property names with\n * dashes (`-`) are assumed to be valid CSS property names and set on the\n * element's style object using `setProperty()`. Names without dashes are\n * assumed to be camelCased JavaScript property names and set on the element's\n * style object using property assignment, allowing the style object to\n * translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo {StyleInfo}\n */\nexport const styleMap = directive((styleInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'style' || part.committer.parts.length > 1) {\n        throw new Error('The `styleMap` directive must be used in the style attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { style } = committer.element;\n    // Handle static styles the first time we see a Part\n    if (!styleMapCache.has(part)) {\n        style.cssText = committer.strings.join(' ');\n    }\n    // Remove old properties that no longer exist in styleInfo\n    const oldInfo = styleMapCache.get(part);\n    for (const name in oldInfo) {\n        if (!(name in styleInfo)) {\n            if (name.indexOf('-') === -1) {\n                // tslint:disable-next-line:no-any\n                style[name] = null;\n            }\n            else {\n                style.removeProperty(name);\n            }\n        }\n    }\n    // Add or update properties\n    for (const name in styleInfo) {\n        if (name.indexOf('-') === -1) {\n            // tslint:disable-next-line:no-any\n            style[name] = styleInfo[name];\n        }\n        else {\n            style.setProperty(name, styleInfo[name]);\n        }\n    }\n    styleMapCache.set(part, styleInfo);\n});\n//# sourceMappingURL=style-map.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive, NodePart } from '../lit-html.js';\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap();\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('unsafeHTML can only be used in text bindings');\n    }\n    const previousValue = previousValues.get(part);\n    if (previousValue !== undefined && isPrimitive(value) &&\n        value === previousValue.value && part.value === previousValue.fragment) {\n        return;\n    }\n    const template = document.createElement('template');\n    template.innerHTML = value; // innerHTML casts to string internally\n    const fragment = document.importNode(template.content, true);\n    part.setValue(fragment);\n    previousValues.set(part, { value, fragment });\n});\n//# sourceMappingURL=unsafe-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive } from '../lit-html.js';\nconst _state = new WeakMap();\n// Effectively infinity, but a SMI.\nconst _infinity = 0x7fffffff;\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n *     const content = fetch('./content.txt').then(r => r.text());\n *     html`${until(content, html`<span>Loading...</span>`)}`\n */\nexport const until = directive((...args) => (part) => {\n    let state = _state.get(part);\n    if (state === undefined) {\n        state = {\n            lastRenderedIndex: _infinity,\n            values: [],\n        };\n        _state.set(part, state);\n    }\n    const previousValues = state.values;\n    let previousLength = previousValues.length;\n    state.values = args;\n    for (let i = 0; i < args.length; i++) {\n        // If we've rendered a higher-priority value already, stop.\n        if (i > state.lastRenderedIndex) {\n            break;\n        }\n        const value = args[i];\n        // Render non-Promise values immediately\n        if (isPrimitive(value) ||\n            typeof value.then !== 'function') {\n            part.setValue(value);\n            state.lastRenderedIndex = i;\n            // Since a lower-priority value will never overwrite a higher-priority\n            // synchronous value, we can stop processsing now.\n            break;\n        }\n        // If this is a Promise we've already handled, skip it.\n        if (i < previousLength && value === previousValues[i]) {\n            continue;\n        }\n        // We have a Promise that we haven't seen before, so priorities may have\n        // changed. Forget what we rendered before.\n        state.lastRenderedIndex = _infinity;\n        previousLength = 0;\n        Promise.resolve(value).then((resolvedValue) => {\n            const index = state.values.indexOf(value);\n            // If state.values doesn't contain the value, we've re-rendered without\n            // the value, so don't render it. Then, only render if the value is\n            // higher-priority than what's already been rendered.\n            if (index > -1 && index < state.lastRenderedIndex) {\n                state.lastRenderedIndex = index;\n                part.setValue(resolvedValue);\n                part.commit();\n            }\n        });\n    }\n});\n//# sourceMappingURL=until.js.map","import { render, html, directive, svg } from 'lit-html';\nimport { asyncAppend } from 'lit-html/directives/async-append';\nimport { asyncReplace } from 'lit-html/directives/async-replace';\nimport { cache } from 'lit-html/directives/cache';\nimport { classMap } from 'lit-html/directives/class-map';\nimport { guard } from 'lit-html/directives/guard';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nimport { repeat } from 'lit-html/directives/repeat';\nimport { styleMap } from 'lit-html/directives/style-map';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html';\nimport { until } from 'lit-html/directives/until';\n\nexport default function Vido(state, api) {\n  let componentId = 0;\n  const components = {};\n  let actions = [];\n\n  let app, element;\n\n  let shouldUpdateCount = 0;\n  const resolved = Promise.resolve();\n\n  function getActions(instance) {\n    return directive(function actionsDirective(createFunctions, props) {\n      return function partial(part) {\n        const element = part.committer.element;\n        for (const create of createFunctions) {\n          if (typeof create === 'function') {\n            const exists = actions.find(\n              action =>\n                action.instance === instance && action.componentAction.create === create && action.element === element\n            );\n            if (!exists) {\n              if (typeof element.__vido__ !== 'undefined') delete element.__vido__;\n              const componentAction = { create, update() {}, destroy() {} };\n              actions.push({ instance, componentAction, element, props });\n            } else {\n              exists.props = props;\n            }\n          }\n        }\n      };\n    });\n  }\n\n  const vido = {\n    debug: false,\n    state,\n    api,\n    html,\n    svg,\n    directive,\n    asyncAppend,\n    asyncReplace,\n    cache,\n    classMap,\n    guard,\n    ifDefined,\n    repeat,\n    styleMap,\n    unsafeHTML,\n    until,\n    actions(componentActions, props) {},\n    onDestroy() {},\n    onChange(props) {},\n\n    createComponent(component, props) {\n      const instance = componentId++;\n      const componentInstanceMethods = getComponentInstanceMethods(instance);\n      function update() {\n        vido.updateTemplate();\n      }\n      const destroyable = [];\n      function onDestroy(fn) {\n        destroyable.push(fn);\n      }\n      const onChangeFunctions = [];\n      function onChange(fn) {\n        onChangeFunctions.push(fn);\n      }\n      const vidoInstance = { ...vido, update, onDestroy, onChange, instance, actions: getActions(instance) };\n      const methods = {\n        instance,\n        vidoInstance,\n        destroy() {\n          for (const d of destroyable) {\n            d();\n          }\n        },\n        update: component(vidoInstance, props),\n        change(changedProps) {\n          for (const prop in props) {\n            if (changedProps[prop] === props[prop]) {\n              return;\n            }\n          }\n          for (const fn of onChangeFunctions) {\n            fn(changedProps);\n          }\n        }\n      };\n      components[instance] = methods;\n      components[instance].change(props);\n      if (vido.debug) {\n        console.groupCollapsed(`component created ${instance}`);\n        console.log(instance, component, props, components);\n        console.groupEnd();\n      }\n      return componentInstanceMethods;\n    },\n\n    destroyComponent(instance) {\n      if (typeof components[instance].destroy === 'function') {\n        components[instance].destroy();\n      }\n      actions = actions.filter(action => {\n        if (action.instance === instance && typeof action.componentAction.destroy === 'function') {\n          action.componentAction.destroy(action.element, action.props);\n        }\n        return action.instance !== instance;\n      });\n      delete components[instance];\n      if (vido.debug) {\n        console.groupCollapsed(`component destroyed ${instance}`);\n        console.trace();\n        console.groupEnd();\n      }\n    },\n\n    updateTemplate() {\n      shouldUpdateCount++;\n      const currentShouldUpdateCount = shouldUpdateCount;\n      const self = this;\n      resolved.then(function flush() {\n        if (currentShouldUpdateCount === shouldUpdateCount) {\n          self.render();\n          shouldUpdateCount = 0;\n          if (vido.debug) {\n            console.groupCollapsed('templates updated');\n            console.trace();\n            console.groupEnd();\n          }\n        }\n      });\n    },\n\n    createApp(instance, el) {\n      element = el;\n      const App = this.createComponent(instance);\n      app = App.instance;\n      this.render();\n      return App;\n    },\n\n    executeActions() {\n      for (const action of actions) {\n        if (typeof action.element.__vido__ === 'undefined') {\n          if (typeof action.componentAction.create === 'function') {\n            const result = action.componentAction.create(action.element, action.props);\n            if (vido.debug) {\n              console.groupCollapsed(`create action executed ${action.instance}`);\n              console.log(action);\n              console.trace();\n              console.groupEnd();\n            }\n            if (typeof result !== 'undefined') {\n              if (typeof result.update === 'function') {\n                action.componentAction.update = result.update;\n              }\n              if (typeof result.destroy === 'function') {\n                action.componentAction.destroy = result.destroy;\n              }\n            }\n          }\n        } else {\n          if (typeof action.componentAction.update === 'function') {\n            action.componentAction.update(action.element, action.props);\n            if (vido.debug) {\n              console.groupCollapsed(`update action executed ${action.instance}`);\n              console.log(action);\n              console.trace();\n              console.groupEnd();\n            }\n          }\n        }\n      }\n      for (const action of actions) {\n        action.element.__vido__ = { instance: action.instance, props: action.props };\n      }\n    },\n\n    render() {\n      render(components[app].update(), element);\n      vido.executeActions();\n    }\n  };\n\n  function getComponentInstanceMethods(instance) {\n    return {\n      instance,\n      destroy() {\n        if (vido.debug) {\n          console.groupCollapsed(`destroying component ${instance}`);\n          console.log(instance, components[instance], components);\n          console.trace();\n          console.groupEnd();\n        }\n\n        return vido.destroyComponent(instance);\n      },\n      update() {\n        if (vido.debug) {\n          console.groupCollapsed(`updating component ${instance}`);\n          console.log(instance, components[instance], components);\n          console.trace();\n          console.groupEnd();\n        }\n        return vido.updateTemplate();\n      },\n\n      change(props) {\n        if (vido.debug) {\n          console.groupCollapsed(`changing component ${instance}`);\n          console.log(props, instance, components[instance], components);\n          console.trace();\n          console.groupEnd();\n        }\n        components[instance].change(props);\n      },\n\n      html(props = {}) {\n        return components[instance].update(props);\n      }\n    };\n  }\n\n  return vido;\n}\n"],"names":["directives","WeakMap","directive","f","args","d","set","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","reparentNodes","container","start","end","before","n","nextSibling","insertBefore","removeNodes","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","SVGTemplateResult","super","getTemplateElement","svgElement","firstChild","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","key","join","render","Object","assign","appendInto","svg","__asyncValues","asyncIterator","TypeError","m","__values","verb","Promise","resolve","reject","then","done","settle","asyncAppend","mapper","async","e_1","_a","value_1_1","value_1","next","itemStartNode","e_1_1","error","return","asyncReplace","cache","previousValue","cachedTemplate","nodes","createDocumentFragment","classMapCache","classMap","classInfo","className","classList","oldInfo","remove","previousValues","guard","every","from","ifDefined","createAndInsertPart","containerPart","beforePart","beforeNode","newPart","updatePart","insertPartBefore","removePart","generateMap","list","map","partListCache","keyListCache","repeat","items","keyFnOrTemplate","keyFn","oldParts","oldKeys","newParts","newValues","newKeys","newKeyToIndexMap","oldKeyToIndexMap","oldHead","oldTail","newHead","newTail","oldIndex","oldPart","styleMapCache","styleMap","styleInfo","style","cssText","removeProperty","setProperty","unsafeHTML","_state","until","state","lastRenderedIndex","previousLength","resolvedValue","api","componentId","components","app","actions","shouldUpdateCount","resolved","getActions","createFunctions","props","create","exists","find","action","componentAction","__vido__","vido","debug","componentActions","component","componentInstanceMethods","destroy","console","groupCollapsed","log","trace","groupEnd","destroyComponent","updateTemplate","change","getComponentInstanceMethods","destroyable","onChangeFunctions","vidoInstance","onDestroy","fn","onChange","methods","changedProps","prop","filter","currentShouldUpdateCount","self","el","App","createComponent","executeActions"],"mappings":"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"}