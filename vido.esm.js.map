{"version":3,"file":"vido.esm.js","sources":["node_modules/lit-html/lib/directive.js","node_modules/lit-html/lib/dom.js","node_modules/lit-html/lib/part.js","node_modules/lit-html/lib/template.js","node_modules/lit-html/lib/template-instance.js","node_modules/lit-html/lib/template-result.js","node_modules/lit-html/lib/parts.js","node_modules/lit-html/lib/default-template-processor.js","node_modules/lit-html/lib/template-factory.js","node_modules/lit-html/lib/render.js","node_modules/lit-html/lit-html.js","node_modules/lit-html/directives/async-append.js","node_modules/lit-html/directives/async-replace.js","node_modules/lit-html/directives/cache.js","node_modules/lit-html/directives/class-map.js","node_modules/lit-html/directives/guard.js","node_modules/lit-html/directives/if-defined.js","node_modules/lit-html/directives/repeat.js","node_modules/lit-html/directives/unsafe-html.js","node_modules/lit-html/directives/until.js","vido.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n/**\n * Used to clone existing node instead of each time creating new one which is\n * slower\n */\nconst markerNode = document.createComment('');\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => markerNode.cloneNode();\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nlet policy;\n/**\n * Turns the value to trusted HTML. If the application uses Trusted Types the\n * value is transformed into TrustedHTML, which can be assigned to execution\n * sink. If the application doesn't use Trusted Types, the return value is the\n * same as the argument.\n */\nfunction convertConstantTemplateStringToTrustedHTML(value) {\n    // tslint:disable-next-line\n    const w = window;\n    // TrustedTypes have been renamed to trustedTypes\n    // (https://github.com/WICG/trusted-types/issues/177)\n    const trustedTypes = (w.trustedTypes || w.TrustedTypes);\n    if (trustedTypes && !policy) {\n        policy = trustedTypes.createPolicy('lit-html', { createHTML: (s) => s });\n    }\n    return policy ? policy.createHTML(value) : value;\n}\nconst commentMarker = ` ${marker} `;\n/**\n * Used to clone existing node instead of each time creating new one which is\n * slower\n */\nconst emptyTemplateNode = document.createElement('template');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = emptyTemplateNode.cloneNode();\n        // this is secure because `this.strings` is a TemplateStringsArray.\n        // TODO: validate this when\n        // https://github.com/tc39/proposal-array-is-template-object is implemented.\n        template.innerHTML =\n            convertConstantTemplateStringToTrustedHTML(this.getHTML());\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * A global callback used to sanitize any value before inserting it into the\n * DOM.\n */\nlet sanitizeDOMValueImpl;\n/** Sets the global DOM sanitization callback. */\nexport const __testOnlySetSanitizeDOMValueExperimentalMayChangeWithoutWarning = (newSanitizer) => {\n    if (sanitizeDOMValueImpl !== undefined) {\n        throw new Error(`Attempted to overwrite existing lit-html security policy.` +\n            ` setSanitizeDOMValue should be called at most once.`);\n    }\n    sanitizeDOMValueImpl = newSanitizer;\n};\nconst sanitizeDOMValue = (value, name, type, node) => {\n    if (sanitizeDOMValueImpl !== undefined) {\n        return sanitizeDOMValueImpl(value, name, type, node);\n    }\n    return value;\n};\nexport const __testOnlyClearSanitizerDoNotCallOrElse = () => {\n    sanitizeDOMValueImpl = undefined;\n};\n/**\n * Used to clone text node instead of each time creating new one which is slower\n */\nconst emptyTextNode = document.createTextNode('');\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const parts = this.parts;\n        const l = strings.length - 1;\n        // If we're assigning an attribute via syntax like:\n        //    attr=\"${foo}\"  or  attr=${foo}\n        // but not\n        //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n        // then we don't want to coerce the attribute value into one long\n        // string. Instead we want to just return the value itself directly,\n        // so that sanitizeDOMValue can get the actual value rather than\n        // String(value)\n        // The exception is if v is an array, in which case we do want to smash\n        // it together into a string without calling String() on the array.\n        //\n        // This also allows trusted values (when using TrustedTypes) being\n        // assigned to DOM sinks without being stringified in the process.\n        if (l === 1 && strings[0] === '' && strings[1] === '' &&\n            parts[0] !== undefined) {\n            const v = parts[0].value;\n            if (!isIterable(v)) {\n                return v;\n            }\n        }\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            let value = this._getValue();\n            value = sanitizeDOMValue(value, this.name, 'attribute', this.element);\n            if (typeof value === 'symbol') {\n                // Native Symbols throw if they're coerced to string.\n                value = String(value);\n            }\n            this.element.setAttribute(this.name, value);\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            const renderedValue = sanitizeDOMValue(value, 'data', 'property', node);\n            node.data = typeof renderedValue === 'string' ?\n                renderedValue :\n                String(renderedValue);\n        }\n        else {\n            // When setting text content, for security purposes it matters a lot what\n            // the parent is. For example, <style> and <script> need to be handled\n            // with care, while <span> does not. So first we need to put a text node\n            // into the document, then we can sanitize its contentx.\n            const textNode = emptyTextNode.cloneNode();\n            this.__commitNode(textNode);\n            const renderedValue = sanitizeDOMValue(value, 'textContent', 'property', textNode);\n            textNode.data = typeof renderedValue === 'string' ? renderedValue :\n                String(renderedValue);\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // `value` is a template result that was constructed without knowledge of\n            // the parent we're about to write it into. sanitizeDOMValue hasn't been\n            // made aware of this relationship, and for scripts and style specifically\n            // this is known to be unsafe. So in the case where the user is in\n            // \"secure mode\" (i.e. when there's a sanitizeDOMValue set), we just want\n            // to forbid this because it's not a use case we want to support.\n            // We check for sanitizeDOMValue is to prevent this from\n            // being a breaking change to the library.\n            const parent = this.endNode.parentNode;\n            if (sanitizeDOMValueImpl !== undefined && parent.nodeName === 'STYLE' ||\n                parent.nodeName === 'SCRIPT') {\n                this.__commitText('/* lit-html will not write ' +\n                    'TemplateResults to scripts and styles */');\n                return;\n            }\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            let value = this._getValue();\n            value = sanitizeDOMValue(value, this.name, 'property', this.element);\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = value;\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nimport { createMarker, directive, NodePart } from '../lit-html.js';\n/**\n * A directive that renders the items of an async iterable[1], appending new\n * values after previous values, similar to the built-in support for iterables.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is appended to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://github.com/tc39/proposal-async-iteration\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncAppend = directive((value, mapper) => async (part) => {\n    var e_1, _a;\n    if (!(part instanceof NodePart)) {\n        throw new Error('asyncAppend can only be used in text bindings');\n    }\n    // If we've already set up this particular iterable, we don't need\n    // to do anything.\n    if (value === part.value) {\n        return;\n    }\n    part.value = value;\n    // We keep track of item Parts across iterations, so that we can\n    // share marker nodes between consecutive Parts.\n    let itemPart;\n    let i = 0;\n    try {\n        for (var value_1 = __asyncValues(value), value_1_1; value_1_1 = await value_1.next(), !value_1_1.done;) {\n            let v = value_1_1.value;\n            // Check to make sure that value is the still the current value of\n            // the part, and if not bail because a new value owns this part\n            if (part.value !== value) {\n                break;\n            }\n            // When we get the first value, clear the part. This lets the\n            // previous value display until we can replace it.\n            if (i === 0) {\n                part.clear();\n            }\n            // As a convenience, because functional-programming-style\n            // transforms of iterables and async iterables requires a library,\n            // we accept a mapper function. This is especially convenient for\n            // rendering a template for each item.\n            if (mapper !== undefined) {\n                // This is safe because T must otherwise be treated as unknown by\n                // the rest of the system.\n                v = mapper(v, i);\n            }\n            // Like with sync iterables, each item induces a Part, so we need\n            // to keep track of start and end nodes for the Part.\n            // Note: Because these Parts are not updatable like with a sync\n            // iterable (if we render a new value, we always clear), it may\n            // be possible to optimize away the Parts and just re-use the\n            // Part.setValue() logic.\n            let itemStartNode = part.startNode;\n            // Check to see if we have a previous item and Part\n            if (itemPart !== undefined) {\n                // Create a new node to separate the previous and next Parts\n                itemStartNode = createMarker();\n                // itemPart is currently the Part for the previous item. Set\n                // it's endNode to the node we'll use for the next Part's\n                // startNode.\n                itemPart.endNode = itemStartNode;\n                part.endNode.parentNode.insertBefore(itemStartNode, part.endNode);\n            }\n            itemPart = new NodePart(part.options);\n            itemPart.insertAfterNode(itemStartNode);\n            itemPart.setValue(v);\n            itemPart.commit();\n            i++;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (value_1_1 && !value_1_1.done && (_a = value_1.return)) await _a.call(value_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n});\n//# sourceMappingURL=async-append.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nimport { directive, NodePart } from '../lit-html.js';\n/**\n * A directive that renders the items of an async iterable[1], replacing\n * previous values with new values, so that only one value is ever rendered\n * at a time.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is rendered to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://github.com/tc39/proposal-async-iteration\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncReplace = directive((value, mapper) => async (part) => {\n    var e_1, _a;\n    if (!(part instanceof NodePart)) {\n        throw new Error('asyncReplace can only be used in text bindings');\n    }\n    // If we've already set up this particular iterable, we don't need\n    // to do anything.\n    if (value === part.value) {\n        return;\n    }\n    // We nest a new part to keep track of previous item values separately\n    // of the iterable as a value itself.\n    const itemPart = new NodePart(part.options);\n    part.value = value;\n    let i = 0;\n    try {\n        for (var value_1 = __asyncValues(value), value_1_1; value_1_1 = await value_1.next(), !value_1_1.done;) {\n            let v = value_1_1.value;\n            // Check to make sure that value is the still the current value of\n            // the part, and if not bail because a new value owns this part\n            if (part.value !== value) {\n                break;\n            }\n            // When we get the first value, clear the part. This let's the\n            // previous value display until we can replace it.\n            if (i === 0) {\n                part.clear();\n                itemPart.appendIntoPart(part);\n            }\n            // As a convenience, because functional-programming-style\n            // transforms of iterables and async iterables requires a library,\n            // we accept a mapper function. This is especially convenient for\n            // rendering a template for each item.\n            if (mapper !== undefined) {\n                // This is safe because T must otherwise be treated as unknown by\n                // the rest of the system.\n                v = mapper(v, i);\n            }\n            itemPart.setValue(v);\n            itemPart.commit();\n            i++;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (value_1_1 && !value_1_1.done && (_a = value_1.return)) await _a.call(value_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n});\n//# sourceMappingURL=async-replace.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateInstance } from '../lib/template-instance.js';\nimport { directive, NodePart, reparentNodes, TemplateResult } from '../lit-html.js';\nconst templateCaches = new WeakMap();\n/**\n * Enables fast switching between multiple templates by caching the DOM nodes\n * and TemplateInstances produced by the templates.\n *\n * Example:\n *\n * ```\n * let checked = false;\n *\n * html`\n *   ${cache(checked ? html`input is checked` : html`input is not checked`)}\n * `\n * ```\n */\nexport const cache = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('cache can only be used in text bindings');\n    }\n    let templateCache = templateCaches.get(part);\n    if (templateCache === undefined) {\n        templateCache = new WeakMap();\n        templateCaches.set(part, templateCache);\n    }\n    const previousValue = part.value;\n    // First, can we update the current TemplateInstance, or do we need to move\n    // the current nodes into the cache?\n    if (previousValue instanceof TemplateInstance) {\n        if (value instanceof TemplateResult &&\n            previousValue.template === part.options.templateFactory(value)) {\n            // Same Template, just trigger an update of the TemplateInstance\n            part.setValue(value);\n            return;\n        }\n        else {\n            // Not the same Template, move the nodes from the DOM into the cache.\n            let cachedTemplate = templateCache.get(previousValue.template);\n            if (cachedTemplate === undefined) {\n                cachedTemplate = {\n                    instance: previousValue,\n                    nodes: document.createDocumentFragment(),\n                };\n                templateCache.set(previousValue.template, cachedTemplate);\n            }\n            reparentNodes(cachedTemplate.nodes, part.startNode.nextSibling, part.endNode);\n        }\n    }\n    // Next, can we reuse nodes from the cache?\n    if (value instanceof TemplateResult) {\n        const template = part.options.templateFactory(value);\n        const cachedTemplate = templateCache.get(template);\n        if (cachedTemplate !== undefined) {\n            // Move nodes out of cache\n            part.setValue(cachedTemplate.nodes);\n            part.commit();\n            // Set the Part value to the TemplateInstance so it'll update it.\n            part.value = cachedTemplate.instance;\n        }\n    }\n    part.setValue(value);\n});\n//# sourceMappingURL=cache.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst previousClassesCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    let previousClasses = previousClassesCache.get(part);\n    if (previousClasses === undefined) {\n        // Write static classes once\n        element.className = committer.strings.join(' ');\n        previousClassesCache.set(part, previousClasses = new Set());\n    }\n    const { classList } = element;\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n    previousClasses.forEach((name) => {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n            previousClasses.delete(name);\n        }\n    });\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        // We explicitly want a loose truthy check of `value` because it seems more\n        // convenient that '' and 0 are skipped.\n        // tslint:disable-next-line: triple-equals\n        if (value != previousClasses.has(name)) {\n            if (value) {\n                classList.add(name);\n                previousClasses.add(name);\n            }\n            else {\n                classList.remove(name);\n                previousClasses.delete(name);\n            }\n        }\n    }\n});\n//# sourceMappingURL=class-map.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { directive } from '../lit-html.js';\nconst previousValues = new WeakMap();\n/**\n * Prevents re-render of a template function until a single value or an array of\n * values changes.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([user.id, company.id], () => html`...`)}\n *   </div>\n * ```\n *\n * In this case, the template only renders if either `user.id` or `company.id`\n * changes.\n *\n * guard() is useful with immutable data patterns, by preventing expensive work\n * until data updates.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n *   </div>\n * ```\n *\n * In this case, items are mapped over only when the array reference changes.\n *\n * @param value the value to check before re-rendering\n * @param f the template function\n */\nexport const guard = directive((value, f) => (part) => {\n    const previousValue = previousValues.get(part);\n    if (Array.isArray(value)) {\n        // Dirty-check arrays by item\n        if (Array.isArray(previousValue) &&\n            previousValue.length === value.length &&\n            value.every((v, i) => v === previousValue[i])) {\n            return;\n        }\n    }\n    else if (previousValue === value &&\n        (value !== undefined || previousValues.has(part))) {\n        // Dirty-check non-arrays by identity\n        return;\n    }\n    part.setValue(f());\n    // Copy the value if it's an array so that if it's mutated we don't forget\n    // what the previous values were.\n    previousValues.set(part, Array.isArray(value) ? Array.from(value) : value);\n});\n//# sourceMappingURL=guard.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive } from '../lit-html.js';\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = directive((value) => (part) => {\n    if (value === undefined && part instanceof AttributePart) {\n        if (value !== part.value) {\n            const name = part.committer.name;\n            part.committer.element.removeAttribute(name);\n        }\n    }\n    else {\n        part.setValue(value);\n    }\n});\n//# sourceMappingURL=if-defined.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { createMarker, directive, NodePart, removeNodes, reparentNodes } from '../lit-html.js';\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart = (containerPart, beforePart) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = beforePart === undefined ? containerPart.endNode :\n        beforePart.startNode;\n    const startNode = container.insertBefore(createMarker(), beforeNode);\n    container.insertBefore(createMarker(), beforeNode);\n    const newPart = new NodePart(containerPart.options);\n    newPart.insertAfterNode(startNode);\n    return newPart;\n};\nconst updatePart = (part, value) => {\n    part.setValue(value);\n    part.commit();\n    return part;\n};\nconst insertPartBefore = (containerPart, part, ref) => {\n    const container = containerPart.startNode.parentNode;\n    const beforeNode = ref ? ref.startNode : containerPart.endNode;\n    const endNode = part.endNode.nextSibling;\n    if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n    }\n};\nconst removePart = (part) => {\n    removeNodes(part.startNode.parentNode, part.startNode, part.endNode.nextSibling);\n};\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list, start, end) => {\n    const map = new Map();\n    for (let i = start; i <= end; i++) {\n        map.set(list[i], i);\n    }\n    return map;\n};\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap();\nconst keyListCache = new WeakMap();\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive((items, keyFnOrTemplate, template) => {\n    let keyFn;\n    if (template === undefined) {\n        template = keyFnOrTemplate;\n    }\n    else if (keyFnOrTemplate !== undefined) {\n        keyFn = keyFnOrTemplate;\n    }\n    return (containerPart) => {\n        if (!(containerPart instanceof NodePart)) {\n            throw new Error('repeat can only be used in text bindings');\n        }\n        // Old part & key lists are retrieved from the last update\n        // (associated with the part for this instance of the directive)\n        const oldParts = partListCache.get(containerPart) || [];\n        const oldKeys = keyListCache.get(containerPart) || [];\n        // New part list will be built up as we go (either reused from\n        // old parts or created for new keys in this update). This is\n        // saved in the above cache at the end of the update.\n        const newParts = [];\n        // New value list is eagerly generated from items along with a\n        // parallel array indicating its key.\n        const newValues = [];\n        const newKeys = [];\n        let index = 0;\n        for (const item of items) {\n            newKeys[index] = keyFn ? keyFn(item, index) : index;\n            newValues[index] = template(item, index);\n            index++;\n        }\n        // Maps from key to index for current and previous update; these\n        // are generated lazily only when needed as a performance\n        // optimization, since they are only required for multiple\n        // non-contiguous changes in the list, which are less common.\n        let newKeyToIndexMap;\n        let oldKeyToIndexMap;\n        // Head and tail pointers to old parts and new values\n        let oldHead = 0;\n        let oldTail = oldParts.length - 1;\n        let newHead = 0;\n        let newTail = newValues.length - 1;\n        // Overview of O(n) reconciliation algorithm (general approach\n        // based on ideas found in ivi, vue, snabbdom, etc.):\n        //\n        // * We start with the list of old parts and new values (and\n        //   arrays of their respective keys), head/tail pointers into\n        //   each, and we build up the new list of parts by updating\n        //   (and when needed, moving) old parts or creating new ones.\n        //   The initial scenario might look like this (for brevity of\n        //   the diagrams, the numbers in the array reflect keys\n        //   associated with the old parts or new values, although keys\n        //   and parts/values are actually stored in parallel arrays\n        //   indexed using the same head/tail pointers):\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n        //                                      item order\n        //      newHead ^                 ^ newTail\n        //\n        // * Iterate old & new lists from both sides, updating,\n        //   swapping, or removing parts at the head/tail locations\n        //   until neither head nor tail can move.\n        //\n        // * Example below: keys at head pointers match, so update old\n        //   part 0 in-place (no need to move it) and record part 0 in\n        //   the `newParts` list. The last thing we do is advance the\n        //   `oldHead` and `newHead` pointers (will be reflected in the\n        //   next diagram).\n        //\n        //      oldHead v                 v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //      newHead ^                 ^ newTail\n        //\n        // * Example below: head pointers don't match, but tail\n        //   pointers do, so update part 6 in place (no need to move\n        //   it), and record part 6 in the `newParts` list. Last,\n        //   advance the `oldTail` and `oldHead` pointers.\n        //\n        //         oldHead v              v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n        //                                      & newTail\n        //         newHead ^              ^ newTail\n        //\n        // * If neither head nor tail match; next check if one of the\n        //   old head/tail items was removed. We first need to generate\n        //   the reverse map of new keys to index (`newKeyToIndexMap`),\n        //   which is done once lazily as a performance optimization,\n        //   since we only hit this case if multiple non-contiguous\n        //   changes were made. Note that for contiguous removal\n        //   anywhere in the list, the head and tails would advance\n        //   from either end and pass each other before we get to this\n        //   case and removals would be handled in the final while loop\n        //   without needing to generate the map.\n        //\n        // * Example below: The key at `oldTail` was removed (no longer\n        //   in the `newKeyToIndexMap`), so remove that part from the\n        //   DOM and advance just the `oldTail` pointer.\n        //\n        //         oldHead v           v oldTail\n        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n        //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n        //         newHead ^           ^ newTail\n        //\n        // * Once head and tail cannot move, any mismatches are due to\n        //   either new or moved items; if a new key is in the previous\n        //   \"old key to old index\" map, move the old part to the new\n        //   location, otherwise create and insert a new part. Note\n        //   that when moving an old part we null its position in the\n        //   oldParts array if it lies between the head and tail so we\n        //   know to skip it when the pointers get there.\n        //\n        // * Example below: neither head nor tail match, and neither\n        //   were removed; so find the `newHead` key in the\n        //   `oldKeyToIndexMap`, and move that old part's DOM into the\n        //   next head position (before `oldParts[oldHead]`). Last,\n        //   null the part in the `oldPart` array since it was\n        //   somewhere in the remaining oldParts still to be scanned\n        //   (between the head and tail pointers) so that we know to\n        //   skip that old part on future iterations.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n        //                                      newHead\n        //         newHead ^           ^ newTail\n        //\n        // * Note that for moves/insertions like the one above, a part\n        //   inserted at the head pointer is inserted before the\n        //   current `oldParts[oldHead]`, and a part inserted at the\n        //   tail pointer is inserted before `newParts[newTail+1]`. The\n        //   seeming asymmetry lies in the fact that new parts are\n        //   moved into place outside in, so to the right of the head\n        //   pointer are old parts, and to the right of the tail\n        //   pointer are new parts.\n        //\n        // * We always restart back from the top of the algorithm,\n        //   allowing matching and simple updates in place to\n        //   continue...\n        //\n        // * Example below: the head pointers once again match, so\n        //   simply update part 1 and record it in the `newParts`\n        //   array.  Last, advance both head pointers.\n        //\n        //         oldHead v        v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n        //                                      & newHead\n        //            newHead ^        ^ newTail\n        //\n        // * As mentioned above, items that were moved as a result of\n        //   being stuck (the final else clause in the code below) are\n        //   marked with null, so we always advance old pointers over\n        //   these so we're comparing the next actual old value on\n        //   either end.\n        //\n        // * Example below: `oldHead` is null (already placed in\n        //   newParts), so advance `oldHead`.\n        //\n        //            oldHead v     v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n        //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //               newHead ^     ^ newTail\n        //\n        // * Note it's not critical to mark old parts as null when they\n        //   are moved from head to tail or tail to head, since they\n        //   will be outside the pointer range and never visited again.\n        //\n        // * Example below: Here the old tail key matches the new head\n        //   key, so the part at the `oldTail` position and move its\n        //   DOM to the new head position (before `oldParts[oldHead]`).\n        //   Last, advance `oldTail` and `newHead` pointers.\n        //\n        //               oldHead v  v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n        //                                     advance oldTail & newHead\n        //               newHead ^     ^ newTail\n        //\n        // * Example below: Old and new head keys match, so update the\n        //   old head part in place, and advance the `oldHead` and\n        //   `newHead` pointers.\n        //\n        //               oldHead v oldTail\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n        //                                      newHead\n        //                  newHead ^  ^ newTail\n        //\n        // * Once the new or old pointers move past each other then all\n        //   we have left is additions (if old list exhausted) or\n        //   removals (if new list exhausted). Those are handled in the\n        //   final while loops at the end.\n        //\n        // * Example below: `oldHead` exceeded `oldTail`, so we're done\n        //   with the main loop.  Create the remaining part and insert\n        //   it at the new head position, and the update is complete.\n        //\n        //                   (oldHead > oldTail)\n        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n        //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n        //                     newHead ^ newTail\n        //\n        // * Note that the order of the if/else clauses is not\n        //   important to the algorithm, as long as the null checks\n        //   come first (to ensure we're always working on valid old\n        //   parts) and that the final else clause comes last (since\n        //   that's where the expensive moves occur). The order of\n        //   remaining clauses is is just a simple guess at which cases\n        //   will be most common.\n        //\n        // * TODO(kschaaf) Note, we could calculate the longest\n        //   increasing subsequence (LIS) of old items in new position,\n        //   and only move those not in the LIS set. However that costs\n        //   O(nlogn) time and adds a bit more code, and only helps\n        //   make rare types of mutations require fewer moves. The\n        //   above handles removes, adds, reversal, swaps, and single\n        //   moves of contiguous items in linear time, in the minimum\n        //   number of moves. As the number of multiple moves where LIS\n        //   might help approaches a random shuffle, the LIS\n        //   optimization becomes less helpful, so it seems not worth\n        //   the code at this point. Could reconsider if a compelling\n        //   case arises.\n        while (oldHead <= oldTail && newHead <= newTail) {\n            if (oldParts[oldHead] === null) {\n                // `null` means old part at head has already been used\n                // below; skip\n                oldHead++;\n            }\n            else if (oldParts[oldTail] === null) {\n                // `null` means old part at tail has already been used\n                // below; skip\n                oldTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newHead]) {\n                // Old head matches new head; update in place\n                newParts[newHead] =\n                    updatePart(oldParts[oldHead], newValues[newHead]);\n                oldHead++;\n                newHead++;\n            }\n            else if (oldKeys[oldTail] === newKeys[newTail]) {\n                // Old tail matches new tail; update in place\n                newParts[newTail] =\n                    updatePart(oldParts[oldTail], newValues[newTail]);\n                oldTail--;\n                newTail--;\n            }\n            else if (oldKeys[oldHead] === newKeys[newTail]) {\n                // Old head matches new tail; update and move to new tail\n                newParts[newTail] =\n                    updatePart(oldParts[oldHead], newValues[newTail]);\n                insertPartBefore(containerPart, oldParts[oldHead], newParts[newTail + 1]);\n                oldHead++;\n                newTail--;\n            }\n            else if (oldKeys[oldTail] === newKeys[newHead]) {\n                // Old tail matches new head; update and move to new head\n                newParts[newHead] =\n                    updatePart(oldParts[oldTail], newValues[newHead]);\n                insertPartBefore(containerPart, oldParts[oldTail], oldParts[oldHead]);\n                oldTail--;\n                newHead++;\n            }\n            else {\n                if (newKeyToIndexMap === undefined) {\n                    // Lazily generate key-to-index maps, used for removals &\n                    // moves below\n                    newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n                    oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n                }\n                if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n                    // Old head is no longer in new list; remove\n                    removePart(oldParts[oldHead]);\n                    oldHead++;\n                }\n                else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n                    // Old tail is no longer in new list; remove\n                    removePart(oldParts[oldTail]);\n                    oldTail--;\n                }\n                else {\n                    // Any mismatches at this point are due to additions or\n                    // moves; see if we have an old part we can reuse and move\n                    // into place\n                    const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n                    const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n                    if (oldPart === null) {\n                        // No old part for this value; create a new one and\n                        // insert it\n                        const newPart = createAndInsertPart(containerPart, oldParts[oldHead]);\n                        updatePart(newPart, newValues[newHead]);\n                        newParts[newHead] = newPart;\n                    }\n                    else {\n                        // Reuse old part\n                        newParts[newHead] =\n                            updatePart(oldPart, newValues[newHead]);\n                        insertPartBefore(containerPart, oldPart, oldParts[oldHead]);\n                        // This marks the old part as having been used, so that\n                        // it will be skipped in the first two checks above\n                        oldParts[oldIndex] = null;\n                    }\n                    newHead++;\n                }\n            }\n        }\n        // Add parts for any remaining new values\n        while (newHead <= newTail) {\n            // For all remaining additions, we insert before last new\n            // tail, since old pointers are no longer valid\n            const newPart = createAndInsertPart(containerPart, newParts[newTail + 1]);\n            updatePart(newPart, newValues[newHead]);\n            newParts[newHead++] = newPart;\n        }\n        // Remove any remaining unused old parts\n        while (oldHead <= oldTail) {\n            const oldPart = oldParts[oldHead++];\n            if (oldPart !== null) {\n                removePart(oldPart);\n            }\n        }\n        // Save order of new parts for next round\n        partListCache.set(containerPart, newParts);\n        keyListCache.set(containerPart, newKeys);\n    };\n});\n//# sourceMappingURL=repeat.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive, NodePart } from '../lit-html.js';\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap();\n/**\n * Used to clone existing node instead of each time creating new one which is\n * slower\n */\nconst emptyTemplateNode = document.createElement('template');\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('unsafeHTML can only be used in text bindings');\n    }\n    const previousValue = previousValues.get(part);\n    if (previousValue !== undefined && isPrimitive(value) &&\n        value === previousValue.value && part.value === previousValue.fragment) {\n        return;\n    }\n    const template = emptyTemplateNode.cloneNode();\n    template.innerHTML = value; // innerHTML casts to string internally\n    const fragment = document.importNode(template.content, true);\n    part.setValue(fragment);\n    previousValues.set(part, { value, fragment });\n});\n//# sourceMappingURL=unsafe-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive } from '../lit-html.js';\nconst _state = new WeakMap();\n// Effectively infinity, but a SMI.\nconst _infinity = 0x7fffffff;\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n *     const content = fetch('./content.txt').then(r => r.text());\n *     html`${until(content, html`<span>Loading...</span>`)}`\n */\nexport const until = directive((...args) => (part) => {\n    let state = _state.get(part);\n    if (state === undefined) {\n        state = {\n            lastRenderedIndex: _infinity,\n            values: [],\n        };\n        _state.set(part, state);\n    }\n    const previousValues = state.values;\n    let previousLength = previousValues.length;\n    state.values = args;\n    for (let i = 0; i < args.length; i++) {\n        // If we've rendered a higher-priority value already, stop.\n        if (i > state.lastRenderedIndex) {\n            break;\n        }\n        const value = args[i];\n        // Render non-Promise values immediately\n        if (isPrimitive(value) ||\n            typeof value.then !== 'function') {\n            part.setValue(value);\n            state.lastRenderedIndex = i;\n            // Since a lower-priority value will never overwrite a higher-priority\n            // synchronous value, we can stop processing now.\n            break;\n        }\n        // If this is a Promise we've already handled, skip it.\n        if (i < previousLength && value === previousValues[i]) {\n            continue;\n        }\n        // We have a Promise that we haven't seen before, so priorities may have\n        // changed. Forget what we rendered before.\n        state.lastRenderedIndex = _infinity;\n        previousLength = 0;\n        Promise.resolve(value).then((resolvedValue) => {\n            const index = state.values.indexOf(value);\n            // If state.values doesn't contain the value, we've re-rendered without\n            // the value, so don't render it. Then, only render if the value is\n            // higher-priority than what's already been rendered.\n            if (index > -1 && index < state.lastRenderedIndex) {\n                state.lastRenderedIndex = index;\n                part.setValue(resolvedValue);\n                part.commit();\n            }\n        });\n    }\n});\n//# sourceMappingURL=until.js.map","import { render, html, directive, svg } from 'lit-html';\nimport { asyncAppend } from 'lit-html/directives/async-append';\nimport { asyncReplace } from 'lit-html/directives/async-replace';\nimport { cache } from 'lit-html/directives/cache';\nimport { classMap } from 'lit-html/directives/class-map';\nimport { guard } from 'lit-html/directives/guard';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nimport { repeat } from 'lit-html/directives/repeat';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html';\nimport { until } from 'lit-html/directives/until';\n\n/* dev imports\nimport { render, html, directive, svg } from '../lit-html';\nimport { asyncAppend } from '../lit-html/directives/async-append';\nimport { asyncReplace } from '../lit-html/directives/async-replace';\nimport { cache } from '../lit-html/directives/cache';\nimport { classMap } from '../lit-html/directives/class-map';\nimport { guard } from '../lit-html/directives/guard';\nimport { ifDefined } from '../lit-html/directives/if-defined';\nimport { repeat } from '../lit-html/directives/repeat';\nimport { unsafeHTML } from '../lit-html/directives/unsafe-html';\nimport { until } from '../lit-html/directives/until';\n*/\n\n/**\n * Schedule - a throttle function that uses requestAnimationFrame to limit the rate at which a function is called.\n *\n * @param {function} fn\n * @returns {function}\n */\nfunction schedule(fn: (argument) => void | any) {\n  let frameId = 0;\n  function wrapperFn(argument) {\n    if (frameId) {\n      return;\n    }\n    function executeFrame() {\n      frameId = 0;\n      fn.apply(undefined, [argument]);\n    }\n    frameId = requestAnimationFrame(executeFrame);\n  }\n  return wrapperFn;\n}\n\n/**\n * Is object - helper function to determine if specified variable is an object\n *\n * @param {any} item\n * @returns {boolean}\n */\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\n/**\n * Merge deep - helper function which will merge objects recursively - creating brand new one - like clone\n *\n * @param {object} target\n * @params {object} sources\n * @returns {object}\n */\nfunction mergeDeep(target, ...sources) {\n  const source = sources.shift();\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (typeof target[key] === 'undefined') {\n          target[key] = {};\n        }\n        target[key] = mergeDeep(target[key], source[key]);\n      } else if (Array.isArray(source[key])) {\n        target[key] = [];\n        for (let item of source[key]) {\n          if (isObject(item)) {\n            target[key].push(mergeDeep({}, item));\n            continue;\n          }\n          target[key].push(item);\n        }\n      } else {\n        target[key] = source[key];\n      }\n    }\n  }\n  if (!sources.length) {\n    return target;\n  }\n  return mergeDeep(target, ...sources);\n}\n\n/**\n * Clone helper function\n *\n * @param source\n * @returns {object} cloned source\n */\nfunction clone(source) {\n  if (typeof source.actions !== 'undefined') {\n    const actns = source.actions.map((action) => {\n      const result = { ...action };\n      const props = { ...result.props };\n      delete props.state;\n      delete props.api;\n      delete result.element;\n      result.props = props;\n      return result;\n    });\n    source.actions = actns;\n  }\n  return mergeDeep({}, source);\n}\n\n/**\n * Vido library\n *\n * @param {any} state - state management for the view (can be anything)\n * @param {any} api - some api's or other globally available services\n * @returns {object} vido instance\n */\nexport default function Vido(state, api) {\n  let componentId = 0;\n  const components = new Map();\n  let actionsByInstance = new Map();\n  let app, element;\n  let shouldUpdateCount = 0;\n  const resolved = Promise.resolve();\n  const previousStyle = new WeakMap();\n\n  /**\n   * Get actions for component instance as directives\n   *\n   * @param {string} instance\n   * @returns {function} directive that will execute actions\n   */\n  function getActions(instance) {\n    return directive(function actionsByInstanceDirective(createFunctions, props = {}) {\n      return function actions(part) {\n        const element = part.committer.element;\n        for (const create of createFunctions) {\n          if (typeof create === 'function') {\n            let exists;\n            if (actionsByInstance.has(instance)) {\n              for (const action of actionsByInstance.get(instance)) {\n                if (action.componentAction.create === create && action.element === element) {\n                  exists = action;\n                  break;\n                }\n              }\n            }\n            if (!exists) {\n              if (typeof element.vido !== 'undefined') delete element.vido;\n              const componentAction = { create, update() {}, destroy() {} };\n              const action = { instance, componentAction, element, props };\n              let byInstance = [];\n              if (actionsByInstance.has(instance)) {\n                byInstance = actionsByInstance.get(instance);\n              }\n              byInstance.push(action);\n              actionsByInstance.set(instance, byInstance);\n            } else {\n              exists.props = props;\n            }\n          }\n        }\n        part.setValue('');\n      };\n    });\n  }\n\n  class PublicComponentMethods {\n    instance: string;\n    vidoInstance: any;\n    props: any;\n\n    constructor(instance, vidoInstance, props = {}) {\n      this.instance = instance;\n      this.vidoInstance = vidoInstance;\n      this.props = props;\n      this.destroy = this.destroy.bind(this);\n      this.update = this.update.bind(this);\n      this.change = this.change.bind(this);\n      this.html = this.html.bind(this);\n    }\n\n    /**\n     * Destroy component\n     */\n    destroy() {\n      if (this.vidoInstance.debug) {\n        console.groupCollapsed(`destroying component ${this.instance}`);\n        console.log(clone({ components: components.keys(), actionsByInstance }));\n        console.trace();\n        console.groupEnd();\n      }\n      return this.vidoInstance.destroyComponent(this.instance, this.vidoInstance);\n    }\n\n    /**\n     * Update template - trigger rendering process\n     */\n    update() {\n      if (this.vidoInstance.debug) {\n        console.groupCollapsed(`updating component ${this.instance}`);\n        console.log(clone({ components: components.keys(), actionsByInstance }));\n        console.trace();\n        console.groupEnd();\n      }\n      return this.vidoInstance.updateTemplate(this.vidoInstance);\n    }\n\n    /**\n     * Change component input properties\n     * @param {any} newProps\n     */\n    change(newProps, options) {\n      if (this.vidoInstance.debug) {\n        console.groupCollapsed(`changing component ${this.instance}`);\n        console.log(clone({ props: this.props, newProps: newProps, components: components.keys(), actionsByInstance }));\n        console.trace();\n        console.groupEnd();\n      }\n      components.get(this.instance).change(newProps, options);\n    }\n\n    /**\n     * Get component lit-html template\n     * @param {} templateProps\n     */\n    html(templateProps = {}) {\n      return components.get(this.instance).update(templateProps, this.vidoInstance);\n    }\n  }\n\n  /**\n   * Create vido instance for component\n   */\n  function vido() {\n    this.destroyable = [];\n    this.onChangeFunctions = [];\n    this.debug = false;\n    this.state = state;\n    this.api = api;\n    this.lastProps = {};\n    this.reuseComponents = this.reuseComponents.bind(this);\n    this.onDestroy = this.onDestroy.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.update = this.update.bind(this);\n  }\n\n  vido.prototype.html = html;\n  vido.prototype.svg = svg;\n  vido.prototype.directive = directive;\n  vido.prototype.asyncAppend = asyncAppend;\n  vido.prototype.asyncReplace = asyncReplace;\n  vido.prototype.cache = cache;\n  vido.prototype.classMap = classMap;\n  vido.prototype.guard = guard;\n  vido.prototype.ifDefined = ifDefined;\n  vido.prototype.repeat = repeat;\n  vido.prototype.unsafeHTML = unsafeHTML;\n  /*vido.prototype.unsafeHTML = directive((value) => (part) => {\n    const previousValue = previousUnsafeValues.get(part);\n    if (\n      previousValue !== undefined &&\n      isPrimitive(value) &&\n      value === previousValue.value &&\n      part.value === previousValue.fragment\n    ) {\n      return;\n    }\n    const template = templateNode.cloneNode() as HTMLTemplateElement;\n    template.innerHTML = value; // innerHTML casts to string internally\n    const fragment = document.importNode(template.content, true);\n    part.setValue(fragment);\n    previousUnsafeValues.set(part, { value, fragment });\n  });*/\n  vido.prototype.until = until;\n  vido.prototype.schedule = schedule;\n  vido.prototype.actionsByInstance = (componentActions, props) => {};\n  /*vido.prototype.text = directive(\n    (text) =>\n      function setText(part) {\n        const node = textNode.cloneNode() as Text;\n        if (node.data !== text) node.data = text;\n        part.setValue(node);\n      }\n  );*/\n  vido.prototype.styleMap = directive(\n    (styleInfo, removePrevious = true) =>\n      function style(part) {\n        const style = part.committer.element.style;\n        let previous = previousStyle.get(part);\n        if (previous === undefined) {\n          previous = {};\n        }\n        if (removePrevious) {\n          for (const name in previous) {\n            if (styleInfo[name] === undefined) {\n              style.removeProperty(name);\n            }\n          }\n        }\n        for (const name in styleInfo) {\n          const value = styleInfo[name];\n          if (previous[name] !== undefined && previous[name] === value) {\n            continue;\n          }\n          if (!name.includes('-')) {\n            style[name] = value;\n          } else {\n            style.setProperty(name, value);\n          }\n        }\n        previousStyle.set(part, { ...styleInfo });\n      }\n  );\n  vido.prototype.onDestroy = function onDestroy(fn) {\n    this.destroyable.push(fn);\n  };\n  vido.prototype.onChange = function onChange(fn) {\n    this.onChangeFunctions.push(fn);\n  };\n  vido.prototype.update = function update() {\n    this.updateTemplate();\n  };\n\n  /**\n   * Reuse existing components when your data was changed\n   *\n   * @param {array} currentComponents - array of components\n   * @param {array} dataArray  - any data as array for each component\n   * @param {function} getProps - you can pass params to component from array item ( example: item=>({id:item.id}) )\n   * @param {function} component - what kind of components do you want to create?\n   * @param {boolean} leaveTail - leave last elements and do not destroy corresponding components\n   * @returns {array} of components (with updated/destroyed/created ones)\n   */\n  vido.prototype.reuseComponents = function reuseComponents(\n    currentComponents,\n    dataArray,\n    getProps,\n    component,\n    leaveTail = true\n  ) {\n    const modified = [];\n    const currentLen = currentComponents.length;\n    const dataLen = dataArray.length;\n    let leave = false;\n    let leaveStartingAt = 0;\n    if (currentLen < dataLen) {\n      let diff = dataLen - currentLen;\n      while (diff) {\n        const item = dataArray[dataLen - diff];\n        const newComponent = this.createComponent(component, getProps(item));\n        currentComponents.push(newComponent);\n        modified.push(newComponent.instance);\n        diff--;\n      }\n    } else if (currentLen > dataLen) {\n      let diff = currentLen - dataLen;\n      if (leaveTail) {\n        leave = true;\n        leaveStartingAt = currentLen - diff;\n      }\n      while (diff) {\n        const index = currentLen - diff;\n        if (!leaveTail) {\n          modified.push(currentComponents[index].instance);\n          currentComponents[index].destroy();\n        }\n        diff--;\n      }\n      if (!leaveTail) {\n        currentComponents.length = dataLen;\n      }\n    }\n    let index = 0;\n    for (const component of currentComponents) {\n      const item = dataArray[index];\n      if (!modified.includes(component.instance)) {\n        component.change(getProps(item), { leave: leave && index >= leaveStartingAt });\n      }\n      index++;\n    }\n    return currentComponents;\n  };\n\n  class InternalComponentMethods {\n    instance: string;\n    vidoInstance: any;\n    updateFunction: (changedProps: any) => void;\n\n    constructor(instance, vidoInstance, updateFunction) {\n      this.instance = instance;\n      this.vidoInstance = vidoInstance;\n      this.updateFunction = updateFunction;\n    }\n\n    destroy() {\n      if (this.vidoInstance.debug) {\n        console.groupCollapsed(`component destroy method fired ${this.instance}`);\n        console.log(\n          clone({\n            props: this.vidoInstance.props,\n            components: components.keys(),\n            destroyable: this.vidoInstance.destroyable,\n            actionsByInstance\n          })\n        );\n        console.trace();\n        console.groupEnd();\n      }\n      for (const d of this.vidoInstance.destroyable) {\n        d();\n      }\n      this.vidoInstance.onChangeFunctions = [];\n      this.vidoInstance.destroyable = [];\n    }\n\n    update(props = {}) {\n      if (this.vidoInstance.debug) {\n        console.groupCollapsed(`component update method fired ${this.instance}`);\n        console.log(clone({ components: components.keys(), actionsByInstance }));\n        console.trace();\n        console.groupEnd();\n      }\n      return this.updateFunction(props);\n    }\n\n    change(changedProps, options = { leave: false }) {\n      const props = changedProps;\n      if (this.vidoInstance.debug) {\n        console.groupCollapsed(`component change method fired ${this.instance}`);\n        console.log(\n          clone({\n            props,\n            components: components.keys(),\n            onChangeFunctions: this.vidoInstance.onChangeFunctions,\n            changedProps,\n            actionsByInstance\n          })\n        );\n        console.trace();\n        console.groupEnd();\n      }\n      for (const fn of this.vidoInstance.onChangeFunctions) {\n        fn(changedProps, options);\n      }\n    }\n  }\n\n  /**\n   * Create component\n   *\n   * @param {function} component\n   * @param {any} props\n   * @returns {object} component instance methods\n   */\n  vido.prototype.createComponent = function createComponent(component, props = {}) {\n    const instance = component.name + ':' + componentId++;\n    let vidoInstance;\n    vidoInstance = new vido();\n    vidoInstance.instance = instance;\n    vidoInstance.actions = getActions(instance);\n    const publicMethods = new PublicComponentMethods(instance, vidoInstance, props);\n    const internalMethods = new InternalComponentMethods(instance, vidoInstance, component(vidoInstance, props));\n    components.set(instance, internalMethods);\n    components.get(instance).change(props);\n    if (vidoInstance.debug) {\n      console.groupCollapsed(`component created ${instance}`);\n      console.log(clone({ props, components: components.keys(), actionsByInstance }));\n      console.trace();\n      console.groupEnd();\n    }\n    return publicMethods;\n  };\n\n  /**\n   * Destroy component\n   *\n   * @param {string} instance\n   * @param {object} vidoInstance\n   */\n  vido.prototype.destroyComponent = function destroyComponent(instance, vidoInstance) {\n    if (vidoInstance.debug) {\n      console.groupCollapsed(`destroying component ${instance}...`);\n      console.log(clone({ components: components.keys(), actionsByInstance }));\n      console.trace();\n      console.groupEnd();\n    }\n    if (actionsByInstance.has(instance)) {\n      for (const action of actionsByInstance.get(instance)) {\n        if (typeof action.componentAction.destroy === 'function') {\n          action.componentAction.destroy(action.element, action.props);\n        }\n      }\n    }\n    actionsByInstance.delete(instance);\n    components.get(instance).destroy();\n    components.delete(instance);\n    if (vidoInstance.debug) {\n      console.groupCollapsed(`component destroyed ${instance}`);\n      console.log(clone({ components: components.keys(), actionsByInstance }));\n      console.trace();\n      console.groupEnd();\n    }\n  };\n\n  /**\n   * Update template - trigger render proccess\n   * @param {object} vidoInstance\n   */\n  vido.prototype.updateTemplate = function updateTemplate() {\n    const currentShouldUpdateCount = ++shouldUpdateCount;\n    const self = this;\n    function flush() {\n      if (currentShouldUpdateCount === shouldUpdateCount) {\n        shouldUpdateCount = 0;\n        self.render();\n      }\n    }\n    resolved.then(flush);\n  };\n\n  /**\n   * Create app\n   *\n   * @param config\n   * @returns {object} component instance methods\n   */\n  vido.prototype.createApp = function createApp(config) {\n    element = config.element;\n    const App = this.createComponent(config.component, config.props);\n    app = App.instance;\n    this.render();\n    return App;\n  };\n\n  /**\n   * Execute actions\n   */\n  vido.prototype.executeActions = function executeActions() {\n    for (const actions of actionsByInstance.values()) {\n      for (const action of actions) {\n        if (action.element.vido === undefined) {\n          const componentAction = action.componentAction;\n          const create = componentAction.create;\n          if (typeof create === 'function') {\n            let result;\n            if (create.prototype?.update === undefined && create.prototype?.destroy === undefined) {\n              result = create(action.element, action.props);\n            } else {\n              result = new create(action.element, action.props);\n            }\n            if (result !== undefined) {\n              if (typeof result === 'function') {\n                componentAction.destroy = result;\n              } else {\n                if (typeof result.update === 'function') {\n                  componentAction.update = result.update.bind(result);\n                }\n                if (typeof result.destroy === 'function') {\n                  componentAction.destroy = result.destroy.bind(result);\n                }\n              }\n            }\n          }\n        } else {\n          action.element.vido = action.props;\n          if (typeof action.componentAction.update === 'function') {\n            action.componentAction.update(action.element, action.props);\n          }\n        }\n      }\n      for (const action of actions) {\n        action.element.vido = action.props;\n      }\n    }\n  };\n\n  /**\n   * Render view\n   */\n  vido.prototype.render = function renderView() {\n    render(components.get(app).update(), element);\n    this.executeActions();\n  };\n\n  return new vido();\n}\n"],"names":["this","__asyncValues","templateCaches","previousValues","emptyTemplateNode"],"mappings":"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"}